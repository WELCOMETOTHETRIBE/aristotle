'use client';

import { useState, useEffect, useRef } from 'react';
import { 
  Sparkles, Brain, Lightbulb, BookOpen, Heart, Target, 
  MessageSquare, Share2, Bookmark, Play, Pause, RotateCcw,
  ChevronLeft, ChevronRight, Info, Settings, Volume2, VolumeX,
  Send, User, Bot, Clock, Star, TrendingUp, Quote, Zap, X
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface WisdomSpotlightCardProps {
  className?: string;
}

interface WisdomInsight {
  id: string;
  title: string;
  content: string;
  philosopher?: string;
  framework?: string;
  category: 'reflection' | 'practice' | 'principle' | 'story' | 'question';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
  timestamp: Date;
  userRating?: number;
  userNotes?: string;
  isBookmarked?: boolean;
}

interface WisdomSettings {
  enableAIInsights: boolean;
  autoGenerateDaily: boolean;
  preferredDifficulty: 'beginner' | 'intermediate' | 'advanced';
  preferredCategories: string[];
  enableAudio: boolean;
  enableNotifications: boolean;
  reminderTime: string;
  maxInsightsPerDay: number;
}

interface ConversationMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  isTyping?: boolean;
}

interface QuestionnaireResponse {
  id: string;
  framework: string;
  philosopher: string;
  questions: QuestionResponse[];
  timestamp: Date;
  eudaimoniaScore: number;
  insights: string[];
}

interface QuestionResponse {
  question: string;
  answer: string;
  reflection: string;
  practice: string;
}

interface MindfulPractice {
  id: string;
  framework: string;
  philosopher: string;
  title: string;
  description: string;
  questions: string[];
  practices: string[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  category: 'meditation' | 'reflection' | 'action' | 'contemplation';
}

const wisdomCategories = [
  'reflection', 'practice', 'principle', 'story', 'question'
];

const difficultyLevels = [
  { id: 'beginner', label: 'Beginner', icon: 'ðŸŒ±' },
  { id: 'intermediate', label: 'Intermediate', icon: 'ðŸŒ¿' },
  { id: 'advanced', label: 'Advanced', icon: 'ðŸŒ³' }
];

const philosophicalFrameworks = [
  'Stoicism', 'Buddhism', 'Aristotelian', 'Confucianism', 'Taoism', 
  'Existentialism', 'Pragmatism', 'Virtue Ethics', 'Epicureanism', 'Cynicism'
];

const mindfulPractices: MindfulPractice[] = [
  {
    id: 'stoic_reflection',
    framework: 'Stoicism',
    philosopher: 'Marcus Aurelius',
    title: 'Evening Reflection Practice',
    description: 'Examine your day through the lens of Stoic wisdom, identifying what you can control and what you cannot.',
    questions: [
      'What events today were within your control?',
      'How did you respond to challenges outside your control?',
      'What virtues did you practice today?',
      'What would you do differently tomorrow?'
    ],
    practices: [
      'Write down three things you can control tomorrow',
      'Practice the view from above meditation',
      'Reflect on your mortality to prioritize what matters'
    ],
    difficulty: 'intermediate',
    category: 'reflection'
  },
  {
    id: 'buddhist_mindfulness',
    framework: 'Buddhism',
    philosopher: 'Buddha',
    title: 'Mindful Awareness Practice',
    description: 'Cultivate present-moment awareness and observe the nature of your thoughts and emotions.',
    questions: [
      'How often did you notice your breath today?',
      'What thoughts or emotions arose most frequently?',
      'When did you feel most present or distracted?',
      'What would help you be more mindful tomorrow?'
    ],
    practices: [
      'Practice mindful breathing for 5 minutes',
      'Observe thoughts without judgment',
      'Practice loving-kindness meditation'
    ],
    difficulty: 'beginner',
    category: 'meditation'
  },
  {
    id: 'aristotelian_virtue',
    framework: 'Aristotelian',
    philosopher: 'Aristotle',
    title: 'Virtue Cultivation Practice',
    description: 'Examine your character development and identify areas for virtuous growth.',
    questions: [
      'Which virtues did you express most today?',
      'Where did you fall short of your ideal character?',
      'What habits are you building toward excellence?',
      'How can you better align actions with your values?'
    ],
    practices: [
      'Choose one virtue to focus on this week',
      'Practice the golden mean in daily decisions',
      'Reflect on your telos (purpose)'
    ],
    difficulty: 'intermediate',
    category: 'reflection'
  },
  {
    id: 'confucian_harmony',
    framework: 'Confucianism',
    philosopher: 'Confucius',
    title: 'Relational Harmony Practice',
    description: 'Examine your relationships and how you contribute to social harmony.',
    questions: [
      'How did you show respect to others today?',
      'What relationships need more attention?',
      'How did you practice filial piety or loyalty?',
      'What would improve your social harmony?'
    ],
    practices: [
      'Practice active listening in conversations',
      'Show respect through proper etiquette',
      'Strengthen family and community bonds'
    ],
    difficulty: 'beginner',
    category: 'action'
  },
  {
    id: 'taoist_flow',
    framework: 'Taoism',
    philosopher: 'Lao Tzu',
    title: 'Wu Wei (Effortless Action) Practice',
    description: 'Learn to act in harmony with the natural flow of life.',
    questions: [
      'When did you feel most in flow today?',
      'What resistance did you encounter?',
      'How did you practice non-attachment?',
      'What would help you be more spontaneous?'
    ],
    practices: [
      'Practice walking meditation in nature',
      'Let go of rigid plans and expectations',
      'Embrace simplicity and minimalism'
    ],
    difficulty: 'advanced',
    category: 'contemplation'
  },
  {
    id: 'existential_authenticity',
    framework: 'Existentialism',
    philosopher: 'Sartre',
    title: 'Authentic Choice Practice',
    description: 'Examine your choices and their alignment with your authentic self.',
    questions: [
      'What choices did you make from fear vs. authenticity?',
      'How did you take responsibility for your actions?',
      'What would your authentic self do differently?',
      'How are you creating meaning in your life?'
    ],
    practices: [
      'Make one authentic choice each day',
      'Practice radical responsibility',
      'Create your own meaning and purpose'
    ],
    difficulty: 'advanced',
    category: 'reflection'
  },
  {
    id: 'epicurean_pleasure',
    framework: 'Epicureanism',
    philosopher: 'Epicurus',
    title: 'Simple Pleasures Practice',
    description: 'Identify and cultivate the simple pleasures that lead to true happiness.',
    questions: [
      'What simple pleasures did you enjoy today?',
      'What unnecessary desires did you notice?',
      'How did you practice gratitude?',
      'What would bring you more lasting joy?'
    ],
    practices: [
      'Savor simple pleasures mindfully',
      'Practice gratitude for basic needs met',
      'Cultivate friendships and community'
    ],
    difficulty: 'beginner',
    category: 'action'
  }
];

export function WisdomSpotlightCard({ className }: WisdomSpotlightCardProps) {
  const [currentInsight, setCurrentInsight] = useState<WisdomInsight | null>(null);
  const [insights, setInsights] = useState<WisdomInsight[]>([]);
  const [showInfo, setShowInfo] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showConversation, setShowConversation] = useState(false);
  const [conversation, setConversation] = useState<ConversationMessage[]>([]);
  const [userInput, setUserInput] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);
  const [settings, setSettings] = useState<WisdomSettings>({
    enableAIInsights: true,
    autoGenerateDaily: true,
    preferredDifficulty: 'intermediate',
    preferredCategories: ['reflection', 'practice'],
    enableAudio: false,
    enableNotifications: true,
    reminderTime: '09:00',
    maxInsightsPerDay: 3,
  });
  const [dailyInsightsCount, setDailyInsightsCount] = useState(0);
  const [showInsightHistory, setShowInsightHistory] = useState(false);
  const [showQuestionnaire, setShowQuestionnaire] = useState(false);
  const [selectedPractice, setSelectedPractice] = useState<MindfulPractice | null>(null);
  const [questionnaireResponses, setQuestionnaireResponses] = useState<QuestionnaireResponse[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [questionAnswers, setQuestionAnswers] = useState<string[]>([]);
  const conversationEndRef = useRef<HTMLDivElement>(null);

  // Load saved data
  useEffect(() => {
    const savedInsights = localStorage.getItem('wisdomSpotlightInsights');
    const savedSettings = localStorage.getItem('wisdomSpotlightSettings');
    const savedConversation = localStorage.getItem('wisdomSpotlightConversation');
    const savedDailyCount = localStorage.getItem('wisdomSpotlightDailyCount');
    const savedDate = localStorage.getItem('wisdomSpotlightLastDate');
    
    if (savedInsights) {
      const parsed = JSON.parse(savedInsights);
      setInsights(parsed.map((insight: any) => ({
        ...insight,
        timestamp: new Date(insight.timestamp)
      })));
    }
    
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
    
    if (savedConversation) {
      const parsed = JSON.parse(savedConversation);
      setConversation(parsed.map((msg: any) => ({
        ...msg,
        timestamp: new Date(msg.timestamp)
      })));
    }
    
    // Reset daily count if it's a new day
    const today = new Date().toDateString();
    if (savedDate !== today) {
      setDailyInsightsCount(0);
      localStorage.setItem('wisdomSpotlightLastDate', today);
    } else if (savedDailyCount) {
      setDailyInsightsCount(parseInt(savedDailyCount));
    }

    // Load questionnaire responses
    const savedQuestionnaireResponses = localStorage.getItem('wisdomSpotlightQuestionnaireResponses');
    if (savedQuestionnaireResponses) {
      const parsed = JSON.parse(savedQuestionnaireResponses);
      setQuestionnaireResponses(parsed.map((response: any) => ({
        ...response,
        timestamp: new Date(response.timestamp)
      })));
    }
  }, []);

  // Save data
  const saveInsights = (newInsights: WisdomInsight[]) => {
    setInsights(newInsights);
    localStorage.setItem('wisdomSpotlightInsights', JSON.stringify(newInsights));
  };

  const saveSettings = (newSettings: WisdomSettings) => {
    setSettings(newSettings);
    localStorage.setItem('wisdomSpotlightSettings', JSON.stringify(newSettings));
  };

  const saveConversation = (newConversation: ConversationMessage[]) => {
    setConversation(newConversation);
    localStorage.setItem('wisdomSpotlightConversation', JSON.stringify(newConversation));
  };

  const saveQuestionnaireResponses = (newResponses: QuestionnaireResponse[]) => {
    setQuestionnaireResponses(newResponses);
    localStorage.setItem('wisdomSpotlightQuestionnaireResponses', JSON.stringify(newResponses));
  };

  const updateDailyCount = (count: number) => {
    setDailyInsightsCount(count);
    localStorage.setItem('wisdomSpotlightDailyCount', count.toString());
  };

  // Generate AI insight
  const generateInsight = async (category?: string, difficulty?: string) => {
    if (dailyInsightsCount >= settings.maxInsightsPerDay) {
      alert(`You've reached your daily limit of ${settings.maxInsightsPerDay} insights. Come back tomorrow!`);
      return;
    }

    setIsGenerating(true);
    
    try {
      const response = await fetch('/api/ai/guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `Generate a ${category || 'reflection'} insight for ${difficulty || settings.preferredDifficulty} level. 

IMPORTANT: Structure your response exactly as follows:
TITLE: [A concise, compelling title - max 60 characters]
CONTENT: [The main insight content - 2-3 sentences, practical and actionable]
PHILOSOPHER: [One philosopher name from: Marcus Aurelius, Seneca, Epictetus, Aristotle, Confucius, Lao Tzu, Buddha, Socrates, Plato, Epicurus, Diogenes, Zhuangzi, Mencius, Xunzi, Heraclitus, Parmenides, Plotinus, Augustine, Aquinas, Spinoza, Nietzsche, Kierkegaard, Sartre, Camus, Foucault, Derrida, or other classical philosophers]
FRAMEWORK: [One framework from: Stoicism, Buddhism, Confucianism, Taoism, Aristotelian Ethics, Epicureanism, Cynicism, Platonism, Existentialism, Pragmatism, Virtue Ethics, or other classical frameworks]
CATEGORY: [${category || 'reflection'}]
DIFFICULTY: [${difficulty || settings.preferredDifficulty}]

Make the content practical, thought-provoking, and immediately applicable. Keep it concise and focused.`,
          context: {
            page: 'wisdom_spotlight',
            focusVirtue: 'wisdom',
            timeOfDay: new Date().getHours(),
          },
        }),
      });

      if (response.ok) {
        const reader = response.body?.getReader();
        if (reader) {
          let content = '';
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            
            const chunk = new TextDecoder().decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.content) {
                    content += parsed.content;
                  }
                } catch (e) {
                  // Ignore parsing errors
                }
              }
            }
          }
          
          // Parse the structured AI response
          const titleMatch = content.match(/TITLE:\s*(.+?)(?=\n|$)/i);
          const contentMatch = content.match(/CONTENT:\s*(.+?)(?=\n|$)/i);
          const philosopherMatch = content.match(/PHILOSOPHER:\s*(.+?)(?=\n|$)/i);
          const frameworkMatch = content.match(/FRAMEWORK:\s*(.+?)(?=\n|$)/i);
          const categoryMatch = content.match(/CATEGORY:\s*(.+?)(?=\n|$)/i);
          const difficultyMatch = content.match(/DIFFICULTY:\s*(.+?)(?=\n|$)/i);
          
          // Clean markdown from title and content
          const cleanTitle = (titleMatch?.[1]?.trim() || 'Daily Wisdom')
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/`(.*?)`/g, '$1');
          
          const cleanContent = (contentMatch?.[1]?.trim() || content)
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/`(.*?)`/g, '$1')
            .replace(/\[(.*?)\]\(.*?\)/g, '$1')
            .replace(/^#+\s*/gm, '')
            .replace(/^\s*[-*+]\s*/gm, '')
            .replace(/^\s*\d+\.\s*/gm, '');
          
          const insight: WisdomInsight = {
            id: Date.now().toString(),
            title: cleanTitle,
            content: cleanContent,
            philosopher: philosopherMatch?.[1]?.trim() || philosophicalFrameworks[Math.floor(Math.random() * philosophicalFrameworks.length)],
            framework: frameworkMatch?.[1]?.trim() || philosophicalFrameworks[Math.floor(Math.random() * philosophicalFrameworks.length)],
            category: (categoryMatch?.[1]?.trim() as any) || (category as any) || 'reflection',
            difficulty: (difficultyMatch?.[1]?.trim() as any) || (difficulty as any) || settings.preferredDifficulty,
            tags: ['ai-generated', 'daily'],
            timestamp: new Date(),
          };

          const updatedInsights = [insight, ...insights];
          saveInsights(updatedInsights);
          setCurrentInsight(insight);
          updateDailyCount(dailyInsightsCount + 1);
        }
      }
    } catch (error) {
      console.error('Failed to generate insight:', error);
      // Fallback insight
      const fallbackInsight: WisdomInsight = {
        id: Date.now().toString(),
        title: 'The Art of Mindful Reflection',
        content: 'Take a moment to pause and reflect on your day. What moments brought you joy? What challenges did you face? How did you respond? This simple practice of mindful reflection can transform your understanding of yourself and your experiences.',
        philosopher: 'Marcus Aurelius',
        framework: 'Stoicism',
        category: 'reflection',
        difficulty: 'beginner',
        tags: ['reflection', 'mindfulness'],
        timestamp: new Date(),
      };
      
      const updatedInsights = [fallbackInsight, ...insights];
      saveInsights(updatedInsights);
      setCurrentInsight(fallbackInsight);
      updateDailyCount(dailyInsightsCount + 1);
    }
    
    setIsGenerating(false);
  };

  // Send message to AI
  const sendMessage = async () => {
    if (!userInput.trim()) return;

    const userMessage: ConversationMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: userInput.trim(),
      timestamp: new Date(),
    };

    const updatedConversation = [...conversation, userMessage];
    setConversation(updatedConversation);
    saveConversation(updatedConversation);
    setUserInput('');

    // Add typing indicator
    const typingMessage: ConversationMessage = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: '',
      timestamp: new Date(),
      isTyping: true,
    };

    setConversation([...updatedConversation, typingMessage]);

    try {
      const response = await fetch('/api/ai/guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `You are a wise philosophical guide. Respond to this question or reflection: "${userInput.trim()}".

IMPORTANT: Keep your response concise (2-3 sentences max) and conversational. Focus on practical wisdom that the user can immediately apply. Avoid verbose explanations or philosophical jargon. Be encouraging and actionable.

Respond in a warm, conversational tone as if you're having a thoughtful chat with a friend.`,
          context: {
            page: 'wisdom_spotlight',
            focusVirtue: 'wisdom',
            timeOfDay: new Date().getHours(),
          },
        }),
      });

      if (response.ok) {
        const reader = response.body?.getReader();
        if (reader) {
          let content = '';
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            
            const chunk = new TextDecoder().decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.content) {
                    content += parsed.content;
                  }
                } catch (e) {
                  // Ignore parsing errors
                }
              }
            }
          }
          
          // Clean up the response content and remove markdown formatting
          const cleanContent = content
            .replace(/^Here's my response:/i, '')
            .replace(/^Response:/i, '')
            .replace(/^Answer:/i, '')
            .replace(/^Here's what I think:/i, '')
            .replace(/^My thoughts:/i, '')
            .replace(/^I would say:/i, '')
            .replace(/^Let me share:/i, '')
            .replace(/^Consider this:/i, '')
            .replace(/^Here's a perspective:/i, '')
            .replace(/^From a philosophical standpoint:/i, '')
            .replace(/^In terms of wisdom:/i, '')
            // Remove markdown formatting
            .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold formatting
            .replace(/\*(.*?)\*/g, '$1') // Remove italic formatting
            .replace(/`(.*?)`/g, '$1') // Remove code formatting
            .replace(/\[(.*?)\]\(.*?\)/g, '$1') // Remove links, keep text
            .replace(/^#+\s*/gm, '') // Remove markdown headers
            .replace(/^\s*[-*+]\s*/gm, '') // Remove markdown list markers
            .replace(/^\s*\d+\.\s*/gm, '') // Remove numbered list markers
            .trim();
          
          const aiMessage: ConversationMessage = {
            id: (Date.now() + 2).toString(),
            role: 'assistant',
            content: cleanContent || 'I appreciate your question. Let me reflect on this with you...',
            timestamp: new Date(),
          };

          const finalConversation = [...updatedConversation, aiMessage];
          setConversation(finalConversation);
          saveConversation(finalConversation);
        }
      }
    } catch (error) {
      console.error('Failed to get AI response:', error);
      const errorMessage: ConversationMessage = {
        id: (Date.now() + 2).toString(),
        role: 'assistant',
        content: 'I apologize, but I\'m having trouble connecting right now. Please try again in a moment.',
        timestamp: new Date(),
      };

      const finalConversation = [...updatedConversation, errorMessage];
      setConversation(finalConversation);
      saveConversation(finalConversation);
    }
  };

  // Audio functionality
  const speakInsight = (text: string) => {
    if (currentAudio) {
      currentAudio.pause();
      currentAudio.currentTime = 0;
    }

    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.9;
      utterance.pitch = 1;
      utterance.volume = 0.8;
      
      utterance.onstart = () => setIsPlaying(true);
      utterance.onend = () => setIsPlaying(false);
      utterance.onpause = () => setIsPlaying(false);
      utterance.onresume = () => setIsPlaying(true);
      
      speechSynthesis.speak(utterance);
    }
  };

  const stopAudio = () => {
    if ('speechSynthesis' in window) {
      speechSynthesis.cancel();
      setIsPlaying(false);
    }
  };

  // Rate insight
  const rateInsight = (insightId: string, rating: number) => {
    const updatedInsights = insights.map(insight => 
      insight.id === insightId 
        ? { ...insight, userRating: rating }
        : insight
    );
    saveInsights(updatedInsights);
    
    if (currentInsight?.id === insightId) {
      setCurrentInsight({ ...currentInsight, userRating: rating });
    }
  };

  // Bookmark insight
  const toggleBookmark = (insightId: string) => {
    const updatedInsights = insights.map(insight => 
      insight.id === insightId 
        ? { ...insight, isBookmarked: !insight.isBookmarked }
        : insight
    );
    saveInsights(updatedInsights);
    
    if (currentInsight?.id === insightId) {
      setCurrentInsight({ ...currentInsight, isBookmarked: !currentInsight.isBookmarked });
    }
  };

  // Auto-scroll conversation
  useEffect(() => {
    conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [conversation]);

  // Generate initial insight if none exists
  useEffect(() => {
    if (insights.length === 0 && settings.autoGenerateDaily) {
      generateInsight();
    } else if (insights.length > 0 && !currentInsight) {
      setCurrentInsight(insights[0]);
    }
  }, [insights.length]);

  const getCategoryIcon = (category: string) => {
    const icons = {
      reflection: <Brain className="w-4 h-4" />,
      practice: <Target className="w-4 h-4" />,
      principle: <Lightbulb className="w-4 h-4" />,
      story: <BookOpen className="w-4 h-4" />,
      question: <MessageSquare className="w-4 h-4" />
    };
    return icons[category as keyof typeof icons] || <Sparkles className="w-4 h-4" />;
  };

  const getDifficultyColor = (difficulty: string) => {
    const colors = {
      beginner: 'text-green-500 bg-green-100',
      intermediate: 'text-yellow-500 bg-yellow-100',
      advanced: 'text-red-500 bg-red-100'
    };
    return colors[difficulty as keyof typeof colors] || 'text-gray-500 bg-gray-100';
  };

  // Questionnaire functions
  const startQuestionnaire = (practice: MindfulPractice) => {
    setSelectedPractice(practice);
    setCurrentQuestionIndex(0);
    setQuestionAnswers(new Array(practice.questions.length).fill(''));
    setShowQuestionnaire(true);
  };

  const handleQuestionAnswer = (answer: string) => {
    const newAnswers = [...questionAnswers];
    newAnswers[currentQuestionIndex] = answer;
    setQuestionAnswers(newAnswers);
  };

  const nextQuestion = () => {
    if (currentQuestionIndex < (selectedPractice?.questions.length || 0) - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      completeQuestionnaire();
    }
  };

  const completeQuestionnaire = async () => {
    if (!selectedPractice) return;

    const questionResponses: QuestionResponse[] = selectedPractice.questions.map((question, index) => ({
      question,
      answer: questionAnswers[index] || '',
      reflection: '',
      practice: selectedPractice.practices[index] || ''
    }));

    // Generate AI insights for the questionnaire
    const insights = await generateQuestionnaireInsights(selectedPractice, questionResponses);
    
    // Calculate eudaimonia score (simple scoring based on response length and engagement)
    const eudaimoniaScore = Math.min(100, Math.max(0, 
      questionResponses.reduce((score, response) => {
        return score + Math.min(25, response.answer.length / 10);
      }, 0)
    ));

    const response: QuestionnaireResponse = {
      id: Date.now().toString(),
      framework: selectedPractice.framework,
      philosopher: selectedPractice.philosopher,
      questions: questionResponses,
      timestamp: new Date(),
      eudaimoniaScore,
      insights
    };

    const updatedResponses = [response, ...questionnaireResponses];
    saveQuestionnaireResponses(updatedResponses);
    
    // Generate journal entry based on questionnaire
    await generateJournalEntry(response);
    
    setShowQuestionnaire(false);
    setSelectedPractice(null);
    setCurrentQuestionIndex(0);
    setQuestionAnswers([]);
  };

  const generateQuestionnaireInsights = async (practice: MindfulPractice, responses: QuestionResponse[]): Promise<string[]> => {
    try {
      const response = await fetch('/api/ai/guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `Analyze these questionnaire responses for ${practice.framework} practice and provide 3 actionable insights for progress toward Eudaimonia:

Practice: ${practice.title}
Framework: ${practice.framework}
Philosopher: ${practice.philosopher}

Responses:
${responses.map((r, i) => `${i + 1}. ${r.question}: ${r.answer}`).join('\n')}

Provide 3 concise, actionable insights (max 1 sentence each) for continued growth.`,
          context: {
            page: 'wisdom_spotlight',
            focusVirtue: 'wisdom',
            timeOfDay: new Date().getHours(),
          },
        }),
      });

      if (response.ok) {
        const reader = response.body?.getReader();
        if (reader) {
          let content = '';
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            
            const chunk = new TextDecoder().decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.content) {
                    content += parsed.content;
                  }
                } catch (e) {
                  // Ignore parsing errors
                }
              }
            }
          }
          
          // Parse insights from response and clean markdown
          const insights = content.split('\n')
            .filter(line => line.trim().startsWith('â€¢') || line.trim().startsWith('-'))
            .slice(0, 3)
            .map(insight => insight
              .replace(/^\s*[â€¢-]\s*/, '') // Remove bullet points
              .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold
              .replace(/\*(.*?)\*/g, '$1') // Remove italic
              .replace(/`(.*?)`/g, '$1') // Remove code
              .trim()
            );
          return insights.length > 0 ? insights : [
            'Continue reflecting on your daily practices',
            'Focus on one virtue or practice at a time',
            'Build consistent habits for lasting growth'
          ];
        }
      }
    } catch (error) {
      console.error('Failed to generate questionnaire insights:', error);
    }
    
    return [
      'Continue reflecting on your daily practices',
      'Focus on one virtue or practice at a time', 
      'Build consistent habits for lasting growth'
    ];
  };

  const generateJournalEntry = async (questionnaireResponse: QuestionnaireResponse) => {
    try {
      const response = await fetch('/api/ai/guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `Create a journal entry based on this questionnaire response for tracking progress toward Eudaimonia:

Framework: ${questionnaireResponse.framework}
Philosopher: ${questionnaireResponse.philosopher}
Eudaimonia Score: ${questionnaireResponse.eudaimoniaScore}/100

Responses:
${questionnaireResponse.questions.map((q, i) => `${i + 1}. ${q.question}: ${q.answer}`).join('\n')}

Insights:
${questionnaireResponse.insights.join('\n')}

Create a 2-3 sentence journal entry that reflects on this practice session and progress toward flourishing.`,
          context: {
            page: 'wisdom_spotlight',
            focusVirtue: 'wisdom',
            timeOfDay: new Date().getHours(),
          },
        }),
      });

      if (response.ok) {
        const reader = response.body?.getReader();
        if (reader) {
          let content = '';
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            
            const chunk = new TextDecoder().decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.content) {
                    content += parsed.content;
                  }
                } catch (e) {
                  // Ignore parsing errors
                }
              }
            }
          }
          
          // Clean markdown from journal entry content
          const cleanContent = content
            .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold formatting
            .replace(/\*(.*?)\*/g, '$1') // Remove italic formatting
            .replace(/`(.*?)`/g, '$1') // Remove code formatting
            .replace(/\[(.*?)\]\(.*?\)/g, '$1') // Remove links, keep text
            .replace(/^#+\s*/gm, '') // Remove markdown headers
            .replace(/^\s*[-*+]\s*/gm, '') // Remove markdown list markers
            .replace(/^\s*\d+\.\s*/gm, '') // Remove numbered list markers
            .trim();
          
          // Save journal entry to localStorage for integration with journal widget
          const journalEntry = {
            id: Date.now().toString(),
            title: `${questionnaireResponse.framework} Practice Reflection`,
            content: cleanContent,
            timestamp: new Date(),
            tags: ['wisdom-spotlight', questionnaireResponse.framework.toLowerCase(), 'eudaimonia'],
            eudaimoniaScore: questionnaireResponse.eudaimoniaScore
          };
          
          const existingEntries = localStorage.getItem('journalEntries') || '[]';
          const entries = JSON.parse(existingEntries);
          entries.unshift(journalEntry);
          localStorage.setItem('journalEntries', JSON.stringify(entries));
        }
      }
    } catch (error) {
      console.error('Failed to generate journal entry:', error);
    }
  };

  return (
    <div className={cn('bg-surface border border-border rounded-lg p-4', className)}>
      {/* Header with Info and Settings */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-gradient-to-r from-purple-500/20 to-violet-500/20 rounded-full flex items-center justify-center">
            <Sparkles className="w-4 h-4 text-purple-500" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-text">Wisdom Spotlight</h3>
            <p className="text-xs text-muted">AI-powered philosophical insights</p>
          </div>
        </div>
        
        <div className="flex items-center gap-1">
          <button
            onClick={() => setShowInfo(!showInfo)}
            className="p-1.5 hover:bg-surface-2 rounded-lg transition-colors"
          >
            <Info className="w-4 h-4 text-muted" />
          </button>
          <button
            onClick={() => setShowSettings(!showSettings)}
            className="p-1.5 hover:bg-surface-2 rounded-lg transition-colors"
          >
            <Settings className="w-4 h-4 text-muted" />
          </button>
        </div>
      </div>

      {/* Info Modal */}
      {showInfo && (
        <div className="mb-4 p-3 bg-primary/5 border border-primary/20 rounded-lg">
          <h4 className="text-sm font-semibold text-text mb-2 flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-primary" />
            How to use Wisdom Spotlight
          </h4>
          <div className="text-xs text-muted space-y-2">
            <p>â€¢ Generate AI-powered philosophical insights daily</p>
            <p>â€¢ Engage in deep conversations with AI wisdom guide</p>
            <p>â€¢ Rate and bookmark your favorite insights</p>
            <p>â€¢ Explore different difficulty levels and categories</p>
            <p>â€¢ Listen to insights with audio playback</p>
          </div>
        </div>
      )}

      {/* Settings Modal */}
      {showSettings && (
        <div className="mb-4 p-3 bg-surface-2 border border-border rounded-lg">
          <h4 className="text-sm font-semibold text-text mb-3">Settings</h4>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">AI insights</span>
              <button
                onClick={() => saveSettings({ ...settings, enableAIInsights: !settings.enableAIInsights })}
                className={cn(
                  'p-1.5 rounded-lg transition-colors',
                  settings.enableAIInsights 
                    ? 'bg-primary/20 text-primary' 
                    : 'bg-surface text-muted'
                )}
              >
                <Brain className="w-4 h-4" />
              </button>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">Auto-generate daily</span>
              <button
                onClick={() => saveSettings({ ...settings, autoGenerateDaily: !settings.autoGenerateDaily })}
                className={cn(
                  'p-1.5 rounded-lg transition-colors',
                  settings.autoGenerateDaily 
                    ? 'bg-primary/20 text-primary' 
                    : 'bg-surface text-muted'
                )}
              >
                <Zap className="w-4 h-4" />
              </button>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">Audio playback</span>
              <button
                onClick={() => saveSettings({ ...settings, enableAudio: !settings.enableAudio })}
                className={cn(
                  'p-1.5 rounded-lg transition-colors',
                  settings.enableAudio 
                    ? 'bg-primary/20 text-primary' 
                    : 'bg-surface text-muted'
                )}
              >
                {settings.enableAudio ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
              </button>
            </div>
            <div>
              <label className="text-xs text-muted mb-1 block">Preferred difficulty</label>
              <select
                value={settings.preferredDifficulty}
                onChange={(e) => saveSettings({ ...settings, preferredDifficulty: e.target.value as any })}
                className="w-full px-2 py-1 bg-surface border border-border rounded text-xs text-text"
              >
                {difficultyLevels.map(level => (
                  <option key={level.id} value={level.id}>{level.icon} {level.label}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      )}

      {/* Daily Stats */}
      <div className="mb-4">
        <div className="grid grid-cols-3 gap-3">
          <div className="bg-surface-2 rounded-lg p-3">
            <div className="flex items-center gap-2 mb-1">
              <Sparkles className="w-3 h-3 text-muted" />
              <span className="text-xs text-muted">Today</span>
            </div>
            <div className="text-lg font-bold text-text">
              {dailyInsightsCount}/{settings.maxInsightsPerDay}
            </div>
          </div>
          <div className="bg-surface-2 rounded-lg p-3">
            <div className="flex items-center gap-2 mb-1">
              <Bookmark className="w-3 h-3 text-muted" />
              <span className="text-xs text-muted">Saved</span>
            </div>
            <div className="text-lg font-bold text-text">
              {insights.filter(i => i.isBookmarked).length}
            </div>
          </div>
          <div className="bg-surface-2 rounded-lg p-3">
            <div className="flex items-center gap-2 mb-1">
              <MessageSquare className="w-3 h-3 text-muted" />
              <span className="text-xs text-muted">Chats</span>
            </div>
            <div className="text-lg font-bold text-text">
              {conversation.length}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      {!showConversation ? (
        <div className="space-y-4">
          {/* Current Insight */}
          {currentInsight ? (
            <div className="bg-surface-2 border border-border rounded-lg p-4">
              {/* Insight Header */}
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  {getCategoryIcon(currentInsight.category)}
                  <span className="text-xs text-muted capitalize">{currentInsight.category}</span>
                  <span className={cn('px-2 py-1 rounded-full text-xs', getDifficultyColor(currentInsight.difficulty))}>
                    {currentInsight.difficulty}
                  </span>
                </div>
                <div className="flex items-center gap-1">
                  <button
                    onClick={() => toggleBookmark(currentInsight.id)}
                    className={cn(
                      'p-1.5 rounded-lg transition-colors',
                      currentInsight.isBookmarked
                        ? 'bg-primary/20 text-primary'
                        : 'bg-surface text-muted hover:text-text'
                    )}
                  >
                    <Bookmark className="w-4 h-4" />
                  </button>
                  {settings.enableAudio && (
                    <button
                      onClick={() => isPlaying ? stopAudio() : speakInsight(currentInsight.content)}
                      className="p-1.5 bg-surface text-muted hover:text-text rounded-lg transition-colors"
                    >
                      {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    </button>
                  )}
                </div>
              </div>

              {/* Insight Content */}
              <h4 className="text-lg font-semibold text-text mb-2">{currentInsight.title}</h4>
              <p className="text-sm text-muted leading-relaxed mb-3">{currentInsight.content}</p>

              {/* Insight Footer */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-xs text-muted">
                  <span>By {currentInsight.philosopher}</span>
                  <span>â€¢</span>
                  <span>{currentInsight.framework}</span>
                </div>
                <div className="flex items-center gap-1">
                  {[1, 2, 3, 4, 5].map((rating) => (
                    <button
                      key={rating}
                      onClick={() => rateInsight(currentInsight.id, rating)}
                      className={cn(
                        'text-xs transition-colors',
                        currentInsight.userRating && currentInsight.userRating >= rating
                          ? 'text-yellow-500'
                          : 'text-muted hover:text-yellow-500'
                      )}
                    >
                      â˜…
                    </button>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-surface-2 border border-border rounded-lg p-6 text-center">
              <Sparkles className="w-8 h-8 text-muted mx-auto mb-3" />
              <p className="text-sm text-muted">No insight available</p>
            </div>
          )}

          {/* Action Buttons */}
          <div className="grid grid-cols-2 gap-3">
            <button
              onClick={() => generateInsight()}
              disabled={isGenerating || dailyInsightsCount >= settings.maxInsightsPerDay}
              className="flex items-center justify-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-500 to-violet-500 text-white rounded-lg hover:from-purple-600 hover:to-violet-600 transition-all duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span className="text-sm font-medium">Generating...</span>
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4" />
                  <span className="text-sm font-medium">New Insight</span>
                </>
              )}
            </button>
            <button
              onClick={() => setShowConversation(true)}
              className="flex items-center justify-center gap-2 px-4 py-2 bg-surface-2 border border-border text-text rounded-lg hover:bg-surface transition-colors duration-150"
            >
              <MessageSquare className="w-4 h-4" />
              <span className="text-sm font-medium">Chat with AI</span>
            </button>
          </div>

          {/* Mindful Practices Questionnaire */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="text-xs text-muted font-medium">Mindful Practices</div>
              <button
                onClick={() => setShowQuestionnaire(!showQuestionnaire)}
                className="text-xs text-primary hover:underline"
              >
                {showQuestionnaire ? 'Hide' : 'Explore'} Practices
              </button>
            </div>
            
            {showQuestionnaire && (
              <div className="space-y-3">
                <div className="text-xs text-muted">
                  Explore mindful practices from ancient wisdom traditions and track your progress toward Eudaimonia.
                </div>
                
                <div className="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto">
                  {mindfulPractices.map(practice => (
                    <div
                      key={practice.id}
                      className="p-3 bg-surface-2 border border-border rounded-lg hover:bg-surface transition-colors cursor-pointer"
                      onClick={() => startQuestionnaire(practice)}
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex-1">
                          <h4 className="text-sm font-medium text-text">{practice.title}</h4>
                          <p className="text-xs text-muted mt-1">{practice.description}</p>
                        </div>
                        <span className={cn('px-2 py-1 rounded-full text-xs', getDifficultyColor(practice.difficulty))}>
                          {practice.difficulty}
                        </span>
                      </div>
                      <div className="flex items-center justify-between text-xs text-muted">
                        <span>{practice.framework} â€¢ {practice.philosopher}</span>
                        <span className="capitalize">{practice.category}</span>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Recent Questionnaire Responses */}
                {questionnaireResponses.length > 0 && (
                  <div className="space-y-2">
                    <div className="text-xs text-muted font-medium">Recent Practice Sessions</div>
                    <div className="space-y-2 max-h-32 overflow-y-auto">
                      {questionnaireResponses.slice(0, 3).map(response => (
                        <div key={response.id} className="p-2 bg-surface-2 border border-border rounded-lg">
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-xs font-medium text-text">{response.framework}</span>
                            <span className="text-xs text-muted">{response.timestamp.toLocaleDateString()}</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-muted">{response.philosopher}</span>
                            <div className="flex items-center gap-1">
                              <span className="text-xs text-muted">Eudaimonia:</span>
                              <span className={cn(
                                'text-xs font-medium',
                                response.eudaimoniaScore >= 80 ? 'text-green-500' :
                                response.eudaimoniaScore >= 60 ? 'text-yellow-500' : 'text-red-500'
                              )}>
                                {response.eudaimoniaScore}/100
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Quick Generate Options */}
          <div className="space-y-2">
            <div className="text-xs text-muted font-medium">Quick Generate</div>
            <div className="flex flex-wrap gap-2">
              {wisdomCategories.map(category => (
                <button
                  key={category}
                  onClick={() => generateInsight(category)}
                  disabled={isGenerating || dailyInsightsCount >= settings.maxInsightsPerDay}
                  className="px-3 py-1.5 bg-surface-2 border border-border text-text rounded-lg hover:bg-surface transition-colors duration-150 text-xs disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {getCategoryIcon(category)}
                  <span className="ml-1 capitalize">{category}</span>
                </button>
              ))}
            </div>
          </div>

          {/* Insight History */}
          {insights.length > 1 && (
            <div>
              <button
                onClick={() => setShowInsightHistory(!showInsightHistory)}
                className="text-xs text-primary hover:underline"
              >
                {showInsightHistory ? 'Hide' : 'Show'} Previous Insights ({insights.length - 1})
              </button>
              {showInsightHistory && (
                <div className="mt-2 space-y-2 max-h-32 overflow-y-auto">
                  {insights.slice(1).map(insight => (
                    <div
                      key={insight.id}
                      onClick={() => setCurrentInsight(insight)}
                      className="p-2 bg-surface-2 border border-border rounded-lg cursor-pointer hover:bg-surface transition-colors"
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-xs font-medium text-text truncate">{insight.title}</span>
                        <div className="flex items-center gap-1">
                          {insight.isBookmarked && <Bookmark className="w-3 h-3 text-primary" />}
                          <span className="text-xs text-muted">{insight.timestamp.toLocaleDateString()}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      ) : (
        /* Conversation Mode */
        <div className="space-y-4">
          {/* Conversation Header */}
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-semibold text-text">AI Wisdom Guide</h4>
            <button
              onClick={() => setShowConversation(false)}
              className="text-xs text-muted hover:text-text transition-colors"
            >
              Back to Insights
            </button>
          </div>

          {/* Messages */}
          <div className="bg-surface-2 border border-border rounded-lg p-3 h-64 overflow-y-auto">
            {conversation.length === 0 ? (
              <div className="text-center py-8">
                <Bot className="w-8 h-8 text-muted mx-auto mb-2" />
                <p className="text-sm text-muted">Start a conversation with your AI wisdom guide</p>
              </div>
            ) : (
              <div className="space-y-3">
                {conversation.map(message => (
                  <div
                    key={message.id}
                    className={cn(
                      'flex gap-2',
                      message.role === 'user' ? 'justify-end' : 'justify-start'
                    )}
                  >
                    {message.role === 'assistant' && (
                      <div className="w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0">
                        <Bot className="w-3 h-3 text-primary" />
                      </div>
                    )}
                    <div
                      className={cn(
                        'max-w-[80%] p-3 rounded-lg text-sm',
                        message.role === 'user'
                          ? 'bg-primary text-white'
                          : 'bg-surface border border-border text-text'
                      )}
                    >
                      {message.isTyping ? (
                        <div className="flex items-center gap-1">
                          <div className="animate-pulse">Thinking</div>
                          <div className="flex gap-1">
                            <div className="w-1 h-1 bg-muted rounded-full animate-bounce"></div>
                            <div className="w-1 h-1 bg-muted rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-1 h-1 bg-muted rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        </div>
                      ) : (
                        <div className="whitespace-pre-wrap leading-relaxed">{message.content}</div>
                      )}
                    </div>
                    {message.role === 'user' && (
                      <div className="w-6 h-6 bg-surface-2 rounded-full flex items-center justify-center flex-shrink-0">
                        <User className="w-3 h-3 text-muted" />
                      </div>
                    )}
                  </div>
                ))}
                <div ref={conversationEndRef} />
              </div>
            )}
          </div>

          {/* Input */}
          <div className="flex gap-2">
            <input
              type="text"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              placeholder="Ask about wisdom, philosophy, or life..."
              className="flex-1 px-3 py-2 bg-surface-2 border border-border rounded-lg text-sm text-text placeholder-muted focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary"
            />
            <button
              onClick={sendMessage}
              disabled={!userInput.trim()}
              className="px-3 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}

      {/* Questionnaire Modal */}
      {showQuestionnaire && selectedPractice && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-surface border border-border rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
            {/* Header */}
            <div className="p-4 border-b border-border">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-text">{selectedPractice.title}</h3>
                  <p className="text-sm text-muted">{selectedPractice.framework} â€¢ {selectedPractice.philosopher}</p>
                </div>
                <button
                  onClick={() => {
                    setShowQuestionnaire(false);
                    setSelectedPractice(null);
                    setCurrentQuestionIndex(0);
                    setQuestionAnswers([]);
                  }}
                  className="p-1 hover:bg-surface-2 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5 text-muted" />
                </button>
              </div>
            </div>

            {/* Progress */}
            <div className="px-4 py-2 bg-surface-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted">Question {currentQuestionIndex + 1} of {selectedPractice.questions.length}</span>
                <span className="text-primary font-medium">
                  {Math.round(((currentQuestionIndex + 1) / selectedPractice.questions.length) * 100)}%
                </span>
              </div>
              <div className="w-full bg-border rounded-full h-1 mt-2">
                <div 
                  className="bg-primary h-1 rounded-full transition-all duration-300"
                  style={{ width: `${((currentQuestionIndex + 1) / selectedPractice.questions.length) * 100}%` }}
                />
              </div>
            </div>

            {/* Question */}
            <div className="p-4">
              <div className="mb-4">
                <h4 className="text-lg font-medium text-text mb-2">
                  {selectedPractice.questions[currentQuestionIndex]}
                </h4>
                <p className="text-sm text-muted">
                  Take a moment to reflect deeply on this question from {selectedPractice.philosopher}'s perspective.
                </p>
              </div>

              <textarea
                value={questionAnswers[currentQuestionIndex] || ''}
                onChange={(e) => handleQuestionAnswer(e.target.value)}
                placeholder="Share your thoughts and reflections..."
                className="w-full p-3 bg-surface-2 border border-border rounded-lg text-text placeholder-muted focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary resize-none"
                rows={4}
              />

              {/* Suggested Practice */}
              {selectedPractice.practices[currentQuestionIndex] && (
                <div className="mt-3 p-3 bg-primary/5 border border-primary/20 rounded-lg">
                  <div className="flex items-center gap-2 mb-1">
                    <Lightbulb className="w-4 h-4 text-primary" />
                    <span className="text-sm font-medium text-text">Suggested Practice</span>
                  </div>
                  <p className="text-sm text-muted">{selectedPractice.practices[currentQuestionIndex]}</p>
                </div>
              )}
            </div>

            {/* Navigation */}
            <div className="p-4 border-t border-border flex justify-between">
              <button
                onClick={() => setCurrentQuestionIndex(Math.max(0, currentQuestionIndex - 1))}
                disabled={currentQuestionIndex === 0}
                className="px-4 py-2 text-muted hover:text-text disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                Previous
              </button>
              
              <button
                onClick={nextQuestion}
                disabled={!questionAnswers[currentQuestionIndex]?.trim()}
                className="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {currentQuestionIndex === selectedPractice.questions.length - 1 ? 'Complete' : 'Next'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 