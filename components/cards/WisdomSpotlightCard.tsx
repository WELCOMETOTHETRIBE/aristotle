'use client';

import { useState, useEffect, useRef } from 'react';
import { 
  Sparkles, Brain, Lightbulb, BookOpen, Heart, Target, 
  MessageSquare, Share2, Bookmark, Play, Pause, RotateCcw,
  ChevronLeft, ChevronRight, Info, Settings, Volume2, VolumeX,
  Send, User, Bot, Clock, Star, TrendingUp, Quote, Zap
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface WisdomSpotlightCardProps {
  className?: string;
}

interface WisdomInsight {
  id: string;
  title: string;
  content: string;
  philosopher?: string;
  framework?: string;
  category: 'reflection' | 'practice' | 'principle' | 'story' | 'question';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
  timestamp: Date;
  userRating?: number;
  userNotes?: string;
  isBookmarked?: boolean;
}

interface WisdomSettings {
  enableAIInsights: boolean;
  autoGenerateDaily: boolean;
  preferredDifficulty: 'beginner' | 'intermediate' | 'advanced';
  preferredCategories: string[];
  enableAudio: boolean;
  enableNotifications: boolean;
  reminderTime: string;
  maxInsightsPerDay: number;
}

interface ConversationMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  isTyping?: boolean;
}

const wisdomCategories = [
  'reflection', 'practice', 'principle', 'story', 'question'
];

const difficultyLevels = [
  { id: 'beginner', label: 'Beginner', icon: 'ðŸŒ±' },
  { id: 'intermediate', label: 'Intermediate', icon: 'ðŸŒ¿' },
  { id: 'advanced', label: 'Advanced', icon: 'ðŸŒ³' }
];

const philosophicalFrameworks = [
  'Stoicism', 'Buddhism', 'Aristotelian', 'Confucianism', 'Taoism', 
  'Existentialism', 'Pragmatism', 'Virtue Ethics', 'Epicureanism', 'Cynicism'
];

export function WisdomSpotlightCard({ className }: WisdomSpotlightCardProps) {
  const [currentInsight, setCurrentInsight] = useState<WisdomInsight | null>(null);
  const [insights, setInsights] = useState<WisdomInsight[]>([]);
  const [showInfo, setShowInfo] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showConversation, setShowConversation] = useState(false);
  const [conversation, setConversation] = useState<ConversationMessage[]>([]);
  const [userInput, setUserInput] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);
  const [settings, setSettings] = useState<WisdomSettings>({
    enableAIInsights: true,
    autoGenerateDaily: true,
    preferredDifficulty: 'intermediate',
    preferredCategories: ['reflection', 'practice'],
    enableAudio: false,
    enableNotifications: true,
    reminderTime: '09:00',
    maxInsightsPerDay: 3,
  });
  const [dailyInsightsCount, setDailyInsightsCount] = useState(0);
  const [showInsightHistory, setShowInsightHistory] = useState(false);
  const conversationEndRef = useRef<HTMLDivElement>(null);

  // Load saved data
  useEffect(() => {
    const savedInsights = localStorage.getItem('wisdomSpotlightInsights');
    const savedSettings = localStorage.getItem('wisdomSpotlightSettings');
    const savedConversation = localStorage.getItem('wisdomSpotlightConversation');
    const savedDailyCount = localStorage.getItem('wisdomSpotlightDailyCount');
    const savedDate = localStorage.getItem('wisdomSpotlightLastDate');
    
    if (savedInsights) {
      const parsed = JSON.parse(savedInsights);
      setInsights(parsed.map((insight: any) => ({
        ...insight,
        timestamp: new Date(insight.timestamp)
      })));
    }
    
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
    
    if (savedConversation) {
      const parsed = JSON.parse(savedConversation);
      setConversation(parsed.map((msg: any) => ({
        ...msg,
        timestamp: new Date(msg.timestamp)
      })));
    }
    
    // Reset daily count if it's a new day
    const today = new Date().toDateString();
    if (savedDate !== today) {
      setDailyInsightsCount(0);
      localStorage.setItem('wisdomSpotlightLastDate', today);
    } else if (savedDailyCount) {
      setDailyInsightsCount(parseInt(savedDailyCount));
    }
  }, []);

  // Save data
  const saveInsights = (newInsights: WisdomInsight[]) => {
    setInsights(newInsights);
    localStorage.setItem('wisdomSpotlightInsights', JSON.stringify(newInsights));
  };

  const saveSettings = (newSettings: WisdomSettings) => {
    setSettings(newSettings);
    localStorage.setItem('wisdomSpotlightSettings', JSON.stringify(newSettings));
  };

  const saveConversation = (newConversation: ConversationMessage[]) => {
    setConversation(newConversation);
    localStorage.setItem('wisdomSpotlightConversation', JSON.stringify(newConversation));
  };

  const updateDailyCount = (count: number) => {
    setDailyInsightsCount(count);
    localStorage.setItem('wisdomSpotlightDailyCount', count.toString());
  };

  // Generate AI insight
  const generateInsight = async (category?: string, difficulty?: string) => {
    if (dailyInsightsCount >= settings.maxInsightsPerDay) {
      alert(`You've reached your daily limit of ${settings.maxInsightsPerDay} insights. Come back tomorrow!`);
      return;
    }

    setIsGenerating(true);
    
    try {
      const response = await fetch('/api/ai/guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `Generate a ${category || 'reflection'} insight for ${difficulty || settings.preferredDifficulty} level. 

IMPORTANT: Structure your response exactly as follows:
TITLE: [A concise, compelling title - max 60 characters]
CONTENT: [The main insight content - 2-3 sentences, practical and actionable]
PHILOSOPHER: [One philosopher name from: Marcus Aurelius, Seneca, Epictetus, Aristotle, Confucius, Lao Tzu, Buddha, Socrates, Plato, Epicurus, Diogenes, Zhuangzi, Mencius, Xunzi, Heraclitus, Parmenides, Plotinus, Augustine, Aquinas, Spinoza, Nietzsche, Kierkegaard, Sartre, Camus, Foucault, Derrida, or other classical philosophers]
FRAMEWORK: [One framework from: Stoicism, Buddhism, Confucianism, Taoism, Aristotelian Ethics, Epicureanism, Cynicism, Platonism, Existentialism, Pragmatism, Virtue Ethics, or other classical frameworks]
CATEGORY: [${category || 'reflection'}]
DIFFICULTY: [${difficulty || settings.preferredDifficulty}]

Make the content practical, thought-provoking, and immediately applicable. Keep it concise and focused.`,
          context: {
            page: 'wisdom_spotlight',
            focusVirtue: 'wisdom',
            timeOfDay: new Date().getHours(),
          },
        }),
      });

      if (response.ok) {
        const reader = response.body?.getReader();
        if (reader) {
          let content = '';
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            
            const chunk = new TextDecoder().decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.content) {
                    content += parsed.content;
                  }
                } catch (e) {
                  // Ignore parsing errors
                }
              }
            }
          }
          
          // Parse the structured AI response
          const titleMatch = content.match(/TITLE:\s*(.+?)(?=\n|$)/i);
          const contentMatch = content.match(/CONTENT:\s*(.+?)(?=\n|$)/i);
          const philosopherMatch = content.match(/PHILOSOPHER:\s*(.+?)(?=\n|$)/i);
          const frameworkMatch = content.match(/FRAMEWORK:\s*(.+?)(?=\n|$)/i);
          const categoryMatch = content.match(/CATEGORY:\s*(.+?)(?=\n|$)/i);
          const difficultyMatch = content.match(/DIFFICULTY:\s*(.+?)(?=\n|$)/i);
          
          const insight: WisdomInsight = {
            id: Date.now().toString(),
            title: titleMatch?.[1]?.trim() || 'Daily Wisdom',
            content: contentMatch?.[1]?.trim() || content,
            philosopher: philosopherMatch?.[1]?.trim() || philosophicalFrameworks[Math.floor(Math.random() * philosophicalFrameworks.length)],
            framework: frameworkMatch?.[1]?.trim() || philosophicalFrameworks[Math.floor(Math.random() * philosophicalFrameworks.length)],
            category: (categoryMatch?.[1]?.trim() as any) || (category as any) || 'reflection',
            difficulty: (difficultyMatch?.[1]?.trim() as any) || (difficulty as any) || settings.preferredDifficulty,
            tags: ['ai-generated', 'daily'],
            timestamp: new Date(),
          };

          const updatedInsights = [insight, ...insights];
          saveInsights(updatedInsights);
          setCurrentInsight(insight);
          updateDailyCount(dailyInsightsCount + 1);
        }
      }
    } catch (error) {
      console.error('Failed to generate insight:', error);
      // Fallback insight
      const fallbackInsight: WisdomInsight = {
        id: Date.now().toString(),
        title: 'The Art of Mindful Reflection',
        content: 'Take a moment to pause and reflect on your day. What moments brought you joy? What challenges did you face? How did you respond? This simple practice of mindful reflection can transform your understanding of yourself and your experiences.',
        philosopher: 'Marcus Aurelius',
        framework: 'Stoicism',
        category: 'reflection',
        difficulty: 'beginner',
        tags: ['reflection', 'mindfulness'],
        timestamp: new Date(),
      };
      
      const updatedInsights = [fallbackInsight, ...insights];
      saveInsights(updatedInsights);
      setCurrentInsight(fallbackInsight);
      updateDailyCount(dailyInsightsCount + 1);
    }
    
    setIsGenerating(false);
  };

  // Send message to AI
  const sendMessage = async () => {
    if (!userInput.trim()) return;

    const userMessage: ConversationMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: userInput.trim(),
      timestamp: new Date(),
    };

    const updatedConversation = [...conversation, userMessage];
    setConversation(updatedConversation);
    saveConversation(updatedConversation);
    setUserInput('');

    // Add typing indicator
    const typingMessage: ConversationMessage = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: '',
      timestamp: new Date(),
      isTyping: true,
    };

    setConversation([...updatedConversation, typingMessage]);

    try {
      const response = await fetch('/api/ai/guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `You are a wise philosophical guide. Respond to this question or reflection: "${userInput.trim()}".

IMPORTANT: Keep your response concise (2-3 sentences max) and conversational. Focus on practical wisdom that the user can immediately apply. Avoid verbose explanations or philosophical jargon. Be encouraging and actionable.

Respond in a warm, conversational tone as if you're having a thoughtful chat with a friend.`,
          context: {
            page: 'wisdom_spotlight',
            focusVirtue: 'wisdom',
            timeOfDay: new Date().getHours(),
          },
        }),
      });

      if (response.ok) {
        const reader = response.body?.getReader();
        if (reader) {
          let content = '';
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            
            const chunk = new TextDecoder().decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;
                
                try {
                  const parsed = JSON.parse(data);
                  if (parsed.content) {
                    content += parsed.content;
                  }
                } catch (e) {
                  // Ignore parsing errors
                }
              }
            }
          }
          
          // Clean up the response content
          const cleanContent = content
            .replace(/^Here's my response:/i, '')
            .replace(/^Response:/i, '')
            .replace(/^Answer:/i, '')
            .replace(/^Here's what I think:/i, '')
            .replace(/^My thoughts:/i, '')
            .replace(/^I would say:/i, '')
            .replace(/^Let me share:/i, '')
            .replace(/^Consider this:/i, '')
            .replace(/^Here's a perspective:/i, '')
            .replace(/^From a philosophical standpoint:/i, '')
            .replace(/^In terms of wisdom:/i, '')
            .trim();
          
          const aiMessage: ConversationMessage = {
            id: (Date.now() + 2).toString(),
            role: 'assistant',
            content: cleanContent || 'I appreciate your question. Let me reflect on this with you...',
            timestamp: new Date(),
          };

          const finalConversation = [...updatedConversation, aiMessage];
          setConversation(finalConversation);
          saveConversation(finalConversation);
        }
      }
    } catch (error) {
      console.error('Failed to get AI response:', error);
      const errorMessage: ConversationMessage = {
        id: (Date.now() + 2).toString(),
        role: 'assistant',
        content: 'I apologize, but I\'m having trouble connecting right now. Please try again in a moment.',
        timestamp: new Date(),
      };

      const finalConversation = [...updatedConversation, errorMessage];
      setConversation(finalConversation);
      saveConversation(finalConversation);
    }
  };

  // Audio functionality
  const speakInsight = (text: string) => {
    if (currentAudio) {
      currentAudio.pause();
      currentAudio.currentTime = 0;
    }

    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.9;
      utterance.pitch = 1;
      utterance.volume = 0.8;
      
      utterance.onstart = () => setIsPlaying(true);
      utterance.onend = () => setIsPlaying(false);
      utterance.onpause = () => setIsPlaying(false);
      utterance.onresume = () => setIsPlaying(true);
      
      speechSynthesis.speak(utterance);
    }
  };

  const stopAudio = () => {
    if ('speechSynthesis' in window) {
      speechSynthesis.cancel();
      setIsPlaying(false);
    }
  };

  // Rate insight
  const rateInsight = (insightId: string, rating: number) => {
    const updatedInsights = insights.map(insight => 
      insight.id === insightId 
        ? { ...insight, userRating: rating }
        : insight
    );
    saveInsights(updatedInsights);
    
    if (currentInsight?.id === insightId) {
      setCurrentInsight({ ...currentInsight, userRating: rating });
    }
  };

  // Bookmark insight
  const toggleBookmark = (insightId: string) => {
    const updatedInsights = insights.map(insight => 
      insight.id === insightId 
        ? { ...insight, isBookmarked: !insight.isBookmarked }
        : insight
    );
    saveInsights(updatedInsights);
    
    if (currentInsight?.id === insightId) {
      setCurrentInsight({ ...currentInsight, isBookmarked: !currentInsight.isBookmarked });
    }
  };

  // Auto-scroll conversation
  useEffect(() => {
    conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [conversation]);

  // Generate initial insight if none exists
  useEffect(() => {
    if (insights.length === 0 && settings.autoGenerateDaily) {
      generateInsight();
    } else if (insights.length > 0 && !currentInsight) {
      setCurrentInsight(insights[0]);
    }
  }, [insights.length]);

  const getCategoryIcon = (category: string) => {
    const icons = {
      reflection: <Brain className="w-4 h-4" />,
      practice: <Target className="w-4 h-4" />,
      principle: <Lightbulb className="w-4 h-4" />,
      story: <BookOpen className="w-4 h-4" />,
      question: <MessageSquare className="w-4 h-4" />
    };
    return icons[category as keyof typeof icons] || <Sparkles className="w-4 h-4" />;
  };

  const getDifficultyColor = (difficulty: string) => {
    const colors = {
      beginner: 'text-green-500 bg-green-100',
      intermediate: 'text-yellow-500 bg-yellow-100',
      advanced: 'text-red-500 bg-red-100'
    };
    return colors[difficulty as keyof typeof colors] || 'text-gray-500 bg-gray-100';
  };

  return (
    <div className={cn('bg-surface border border-border rounded-lg p-4', className)}>
      {/* Header with Info and Settings */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-gradient-to-r from-purple-500/20 to-violet-500/20 rounded-full flex items-center justify-center">
            <Sparkles className="w-4 h-4 text-purple-500" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-text">Wisdom Spotlight</h3>
            <p className="text-xs text-muted">AI-powered philosophical insights</p>
          </div>
        </div>
        
        <div className="flex items-center gap-1">
          <button
            onClick={() => setShowInfo(!showInfo)}
            className="p-1.5 hover:bg-surface-2 rounded-lg transition-colors"
          >
            <Info className="w-4 h-4 text-muted" />
          </button>
          <button
            onClick={() => setShowSettings(!showSettings)}
            className="p-1.5 hover:bg-surface-2 rounded-lg transition-colors"
          >
            <Settings className="w-4 h-4 text-muted" />
          </button>
        </div>
      </div>

      {/* Info Modal */}
      {showInfo && (
        <div className="mb-4 p-3 bg-primary/5 border border-primary/20 rounded-lg">
          <h4 className="text-sm font-semibold text-text mb-2 flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-primary" />
            How to use Wisdom Spotlight
          </h4>
          <div className="text-xs text-muted space-y-2">
            <p>â€¢ Generate AI-powered philosophical insights daily</p>
            <p>â€¢ Engage in deep conversations with AI wisdom guide</p>
            <p>â€¢ Rate and bookmark your favorite insights</p>
            <p>â€¢ Explore different difficulty levels and categories</p>
            <p>â€¢ Listen to insights with audio playback</p>
          </div>
        </div>
      )}

      {/* Settings Modal */}
      {showSettings && (
        <div className="mb-4 p-3 bg-surface-2 border border-border rounded-lg">
          <h4 className="text-sm font-semibold text-text mb-3">Settings</h4>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">AI insights</span>
              <button
                onClick={() => saveSettings({ ...settings, enableAIInsights: !settings.enableAIInsights })}
                className={cn(
                  'p-1.5 rounded-lg transition-colors',
                  settings.enableAIInsights 
                    ? 'bg-primary/20 text-primary' 
                    : 'bg-surface text-muted'
                )}
              >
                <Brain className="w-4 h-4" />
              </button>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">Auto-generate daily</span>
              <button
                onClick={() => saveSettings({ ...settings, autoGenerateDaily: !settings.autoGenerateDaily })}
                className={cn(
                  'p-1.5 rounded-lg transition-colors',
                  settings.autoGenerateDaily 
                    ? 'bg-primary/20 text-primary' 
                    : 'bg-surface text-muted'
                )}
              >
                <Zap className="w-4 h-4" />
              </button>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">Audio playback</span>
              <button
                onClick={() => saveSettings({ ...settings, enableAudio: !settings.enableAudio })}
                className={cn(
                  'p-1.5 rounded-lg transition-colors',
                  settings.enableAudio 
                    ? 'bg-primary/20 text-primary' 
                    : 'bg-surface text-muted'
                )}
              >
                {settings.enableAudio ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
              </button>
            </div>
            <div>
              <label className="text-xs text-muted mb-1 block">Preferred difficulty</label>
              <select
                value={settings.preferredDifficulty}
                onChange={(e) => saveSettings({ ...settings, preferredDifficulty: e.target.value as any })}
                className="w-full px-2 py-1 bg-surface border border-border rounded text-xs text-text"
              >
                {difficultyLevels.map(level => (
                  <option key={level.id} value={level.id}>{level.icon} {level.label}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      )}

      {/* Daily Stats */}
      <div className="mb-4">
        <div className="grid grid-cols-3 gap-3">
          <div className="bg-surface-2 rounded-lg p-3">
            <div className="flex items-center gap-2 mb-1">
              <Sparkles className="w-3 h-3 text-muted" />
              <span className="text-xs text-muted">Today</span>
            </div>
            <div className="text-lg font-bold text-text">
              {dailyInsightsCount}/{settings.maxInsightsPerDay}
            </div>
          </div>
          <div className="bg-surface-2 rounded-lg p-3">
            <div className="flex items-center gap-2 mb-1">
              <Bookmark className="w-3 h-3 text-muted" />
              <span className="text-xs text-muted">Saved</span>
            </div>
            <div className="text-lg font-bold text-text">
              {insights.filter(i => i.isBookmarked).length}
            </div>
          </div>
          <div className="bg-surface-2 rounded-lg p-3">
            <div className="flex items-center gap-2 mb-1">
              <MessageSquare className="w-3 h-3 text-muted" />
              <span className="text-xs text-muted">Chats</span>
            </div>
            <div className="text-lg font-bold text-text">
              {conversation.length}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      {!showConversation ? (
        <div className="space-y-4">
          {/* Current Insight */}
          {currentInsight ? (
            <div className="bg-surface-2 border border-border rounded-lg p-4">
              {/* Insight Header */}
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  {getCategoryIcon(currentInsight.category)}
                  <span className="text-xs text-muted capitalize">{currentInsight.category}</span>
                  <span className={cn('px-2 py-1 rounded-full text-xs', getDifficultyColor(currentInsight.difficulty))}>
                    {currentInsight.difficulty}
                  </span>
                </div>
                <div className="flex items-center gap-1">
                  <button
                    onClick={() => toggleBookmark(currentInsight.id)}
                    className={cn(
                      'p-1.5 rounded-lg transition-colors',
                      currentInsight.isBookmarked
                        ? 'bg-primary/20 text-primary'
                        : 'bg-surface text-muted hover:text-text'
                    )}
                  >
                    <Bookmark className="w-4 h-4" />
                  </button>
                  {settings.enableAudio && (
                    <button
                      onClick={() => isPlaying ? stopAudio() : speakInsight(currentInsight.content)}
                      className="p-1.5 bg-surface text-muted hover:text-text rounded-lg transition-colors"
                    >
                      {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    </button>
                  )}
                </div>
              </div>

              {/* Insight Content */}
              <h4 className="text-lg font-semibold text-text mb-2">{currentInsight.title}</h4>
              <p className="text-sm text-muted leading-relaxed mb-3">{currentInsight.content}</p>

              {/* Insight Footer */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-xs text-muted">
                  <span>By {currentInsight.philosopher}</span>
                  <span>â€¢</span>
                  <span>{currentInsight.framework}</span>
                </div>
                <div className="flex items-center gap-1">
                  {[1, 2, 3, 4, 5].map((rating) => (
                    <button
                      key={rating}
                      onClick={() => rateInsight(currentInsight.id, rating)}
                      className={cn(
                        'text-xs transition-colors',
                        currentInsight.userRating && currentInsight.userRating >= rating
                          ? 'text-yellow-500'
                          : 'text-muted hover:text-yellow-500'
                      )}
                    >
                      â˜…
                    </button>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-surface-2 border border-border rounded-lg p-6 text-center">
              <Sparkles className="w-8 h-8 text-muted mx-auto mb-3" />
              <p className="text-sm text-muted">No insight available</p>
            </div>
          )}

          {/* Action Buttons */}
          <div className="grid grid-cols-2 gap-3">
            <button
              onClick={() => generateInsight()}
              disabled={isGenerating || dailyInsightsCount >= settings.maxInsightsPerDay}
              className="flex items-center justify-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-500 to-violet-500 text-white rounded-lg hover:from-purple-600 hover:to-violet-600 transition-all duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span className="text-sm font-medium">Generating...</span>
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4" />
                  <span className="text-sm font-medium">New Insight</span>
                </>
              )}
            </button>
            <button
              onClick={() => setShowConversation(true)}
              className="flex items-center justify-center gap-2 px-4 py-2 bg-surface-2 border border-border text-text rounded-lg hover:bg-surface transition-colors duration-150"
            >
              <MessageSquare className="w-4 h-4" />
              <span className="text-sm font-medium">Chat with AI</span>
            </button>
          </div>

          {/* Quick Generate Options */}
          <div className="space-y-2">
            <div className="text-xs text-muted font-medium">Quick Generate</div>
            <div className="flex flex-wrap gap-2">
              {wisdomCategories.map(category => (
                <button
                  key={category}
                  onClick={() => generateInsight(category)}
                  disabled={isGenerating || dailyInsightsCount >= settings.maxInsightsPerDay}
                  className="px-3 py-1.5 bg-surface-2 border border-border text-text rounded-lg hover:bg-surface transition-colors duration-150 text-xs disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {getCategoryIcon(category)}
                  <span className="ml-1 capitalize">{category}</span>
                </button>
              ))}
            </div>
          </div>

          {/* Insight History */}
          {insights.length > 1 && (
            <div>
              <button
                onClick={() => setShowInsightHistory(!showInsightHistory)}
                className="text-xs text-primary hover:underline"
              >
                {showInsightHistory ? 'Hide' : 'Show'} Previous Insights ({insights.length - 1})
              </button>
              {showInsightHistory && (
                <div className="mt-2 space-y-2 max-h-32 overflow-y-auto">
                  {insights.slice(1).map(insight => (
                    <div
                      key={insight.id}
                      onClick={() => setCurrentInsight(insight)}
                      className="p-2 bg-surface-2 border border-border rounded-lg cursor-pointer hover:bg-surface transition-colors"
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-xs font-medium text-text truncate">{insight.title}</span>
                        <div className="flex items-center gap-1">
                          {insight.isBookmarked && <Bookmark className="w-3 h-3 text-primary" />}
                          <span className="text-xs text-muted">{insight.timestamp.toLocaleDateString()}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      ) : (
        /* Conversation Mode */
        <div className="space-y-4">
          {/* Conversation Header */}
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-semibold text-text">AI Wisdom Guide</h4>
            <button
              onClick={() => setShowConversation(false)}
              className="text-xs text-muted hover:text-text transition-colors"
            >
              Back to Insights
            </button>
          </div>

          {/* Messages */}
          <div className="bg-surface-2 border border-border rounded-lg p-3 h-64 overflow-y-auto">
            {conversation.length === 0 ? (
              <div className="text-center py-8">
                <Bot className="w-8 h-8 text-muted mx-auto mb-2" />
                <p className="text-sm text-muted">Start a conversation with your AI wisdom guide</p>
              </div>
            ) : (
              <div className="space-y-3">
                {conversation.map(message => (
                  <div
                    key={message.id}
                    className={cn(
                      'flex gap-2',
                      message.role === 'user' ? 'justify-end' : 'justify-start'
                    )}
                  >
                    {message.role === 'assistant' && (
                      <div className="w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0">
                        <Bot className="w-3 h-3 text-primary" />
                      </div>
                    )}
                    <div
                      className={cn(
                        'max-w-[80%] p-3 rounded-lg text-sm',
                        message.role === 'user'
                          ? 'bg-primary text-white'
                          : 'bg-surface border border-border text-text'
                      )}
                    >
                      {message.isTyping ? (
                        <div className="flex items-center gap-1">
                          <div className="animate-pulse">Thinking</div>
                          <div className="flex gap-1">
                            <div className="w-1 h-1 bg-muted rounded-full animate-bounce"></div>
                            <div className="w-1 h-1 bg-muted rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-1 h-1 bg-muted rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        </div>
                      ) : (
                        <div className="whitespace-pre-wrap leading-relaxed">{message.content}</div>
                      )}
                    </div>
                    {message.role === 'user' && (
                      <div className="w-6 h-6 bg-surface-2 rounded-full flex items-center justify-center flex-shrink-0">
                        <User className="w-3 h-3 text-muted" />
                      </div>
                    )}
                  </div>
                ))}
                <div ref={conversationEndRef} />
              </div>
            )}
          </div>

          {/* Input */}
          <div className="flex gap-2">
            <input
              type="text"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              placeholder="Ask about wisdom, philosophy, or life..."
              className="flex-1 px-3 py-2 bg-surface-2 border border-border rounded-lg text-sm text-text placeholder-muted focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary"
            />
            <button
              onClick={sendMessage}
              disabled={!userInput.trim()}
              className="px-3 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
} 