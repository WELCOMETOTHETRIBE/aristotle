import { NextRequest, NextResponse } from 'next/server';
import { PHILOSOPHERS } from '@/lib/philosophers';
import { prisma } from '@/lib/db';

export async function POST(request: NextRequest) {
  try {
    if (!prisma) {
      return NextResponse.json({ error: 'Database not configured' }, { status: 500 });
    }
    console.log('üîç AI Thread API called');
    
    // Test Prisma connection and models
    try {
      console.log('üîç Testing Prisma connection...');
      const userCount = await prisma.user.count();
      console.log('‚úÖ User count:', userCount);
      
      // Test if communityPost model exists
      console.log('üîç Testing communityPost model...');
      const postCount = await prisma.communityPost.count();
      console.log('‚úÖ Community post count:', postCount);
    } catch (prismaError) {
      console.error('‚ùå Prisma test failed:', prismaError);
      return NextResponse.json({ 
        error: 'Database connection failed',
        details: prismaError instanceof Error ? prismaError.message : 'Unknown Prisma error',
        timestamp: new Date().toISOString()
      }, { status: 500 });
    }

    const body = await request.json();
    console.log('üîç Request body:', body);
    
    const { 
      title, 
      content, 
      category, 
      tags, 
      imagePath, 
      aiComment, 
      source, 
      sourceId 
    } = body;

    // Check if this is a nature photo thread request
    if (source === 'nature_photo') {
      console.log('üîç Creating nature photo thread...');
      return await createNaturePhotoThread(body);
    }

    console.log('üîç Creating AI philosophical thread...');

    // Check if force generation is requested
    const forceGeneration = body.force === true;
    
    // Enforce one AI thread per day (unless forced)
    if (!forceGeneration) {
      const startOfDay = new Date();
      startOfDay.setHours(0, 0, 0, 0);
      const endOfDay = new Date();
      endOfDay.setHours(23, 59, 59, 999);

      console.log('üîç Checking for existing AI threads today...');
      const existingToday = await prisma.communityPost.findFirst({
        where: {
          isAIQuestion: true,
          createdAt: { gte: startOfDay, lte: endOfDay },
        },
      });

      if (existingToday) {
        console.log('‚úÖ AI thread for today already exists');
        return NextResponse.json({ success: true, message: 'AI thread for today already exists' });
      }
    } else {
      console.log('üîç Force generation requested - bypassing daily limit');
    }

    // Select a random philosopher for today's thread
    const randomPhilosopher = PHILOSOPHERS[Math.floor(Math.random() * PHILOSOPHERS.length)];
    console.log('üîç Selected philosopher:', randomPhilosopher.name);
    
    // Get today's date for context
    const today = new Date();
    const dayOfWeek = today.toLocaleDateString('en-US', { weekday: 'long' });
    const month = today.toLocaleDateString('en-US', { month: 'long' });
    const day = today.getDate();

    // Create the AI thread generation prompt
    const prompt = `You are ${randomPhilosopher.name}, ${randomPhilosopher.title}. Create a thought-provoking philosophical discussion thread for today, ${dayOfWeek}, ${month} ${day}.

${randomPhilosopher.systemPrompt}

Create a discussion thread that:
1. Poses a meaningful philosophical question or presents a thought-provoking idea
2. Encourages community engagement and reflection
3. Relates to modern life while drawing from your philosophical perspective
4. Is accessible but intellectually stimulating
5. Invites diverse perspectives and thoughtful responses

Format your response as JSON with:
{
  "title": "A compelling, thought-provoking title",
  "content": "Your philosophical discussion starter (2-3 paragraphs)",
  "category": "Choose from: Stoicism, Aristotelian Ethics, Courage, Wisdom, Justice, Temperance, Nature Logs",
  "tags": ["relevant", "tags", "for", "the", "topic"]
}

Make it engaging and relevant to people seeking wisdom and personal growth.`;

    // Call the AI API to generate the thread
    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: prompt
          }
        ],
        temperature: 0.8,
        max_tokens: 1000,
      }),
    });

    if (!aiResponse.ok) {
      throw new Error(`OpenAI API error: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    const aiContent = aiData.choices[0]?.message?.content;

    if (!aiContent) {
      throw new Error('No content generated by AI');
    }

    console.log('üîç AI generated content:', aiContent);

    // Parse the AI response
    let threadData;
    try {
      threadData = JSON.parse(aiContent);
    } catch (parseError) {
      console.error('‚ùå Failed to parse AI response as JSON:', parseError);
      // Fallback: create a simple thread structure
      threadData = {
        title: `${randomPhilosopher.name} on Modern Life`,
        content: aiContent,
        category: 'Stoicism',
        tags: ['philosophy', 'reflection', 'wisdom']
      };
    }

    // Ensure AI user exists
    let aiUser = await prisma.user.findUnique({ where: { id: 1 } });
    if (!aiUser) {
      console.log('üîç Creating AI user...');
      aiUser = await prisma.user.create({
        data: {
          id: 1,
          username: 'ai_philosopher',
          displayName: randomPhilosopher.name,
          email: 'ai@aristotle.com',
          password: 'system_user_no_password',
        }
      });
    } else {
      // Update the AI user's display name to match the selected philosopher
      aiUser = await prisma.user.update({
        where: { id: 1 },
        data: {
          displayName: randomPhilosopher.name,
          username: `ai_${randomPhilosopher.id}`,
        }
      });
    }

    console.log('üîç AI user:', aiUser.id, aiUser.displayName);

    // Create the community post
    const newPost = await prisma.communityPost.create({
      data: {
        title: threadData.title,
        content: threadData.content,
        category: threadData.category,
        tags: threadData.tags,
        isAIQuestion: true,
        authorId: aiUser.id,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    });

    console.log('‚úÖ AI thread created successfully:', newPost.id);

    // Return the created thread data
    return NextResponse.json({
      success: true,
      thread: {
        id: newPost.id,
        title: newPost.title,
        content: newPost.content,
        category: newPost.category,
        tags: newPost.tags,
        author: {
          name: aiUser.displayName,
          avatar: randomPhilosopher.avatar,
          isAI: true,
          persona: randomPhilosopher.name,
        },
        replies: 0,
        views: 0,
        likes: 0,
        createdAt: newPost.createdAt.toISOString(),
      },
    });

  } catch (error) {
    console.error('‚ùå Error creating AI thread:', error);
    return NextResponse.json({ 
      error: 'Failed to create AI thread',
      details: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

async function createNaturePhotoThread(body: any) {
  // Implementation for nature photo threads
  // This would be similar but focused on nature photo content
  return NextResponse.json({ error: 'Nature photo threads not implemented yet' }, { status: 501 });
}
