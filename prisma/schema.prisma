// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Using strings instead of enums for PostgreSQL compatibility

model Module {
  id             String         @id
  name           String
  domain         String
  defaultVirtue  String
  description    String?
  philosophy     String?
  scienceNotes   String?
  contraindications String?
  commonMistakes String?
  coachingPrompts String?
  measurement    String?
  meta           String?        @default("{}")

  levels         ModuleLevel[]
  practices      Practice[]
  virtueMaps     ModuleVirtueMap[]
  frameworkModuleMaps FrameworkModuleMap[]
  sessions       Session[]
  streaks        Streak[]
  challenges     Challenge[]
}

model ModuleLevel {
  id           Int       @id @default(autoincrement())
  module       Module    @relation(fields: [moduleId], references: [id])
  moduleId     String
  level        String
  durationHint String?

  practices    Practice[]

  @@unique([moduleId, level])
}

model Practice {
  id            Int          @id @default(autoincrement())
  module        Module?      @relation(fields: [moduleId], references: [id])
  moduleId      String?
  level         ModuleLevel? @relation(fields: [levelId], references: [id])
  levelId       Int?
  name          String
  instructions  String
  rationale     String?
  metrics       String?
  safetyNotes   String?
  coachPrompts  String?
  meta          String?      @default("{}")

  frameworkPracticeMaps FrameworkPracticeMap[]
  sessions      Session[]
}

model ModuleVirtueMap {
  module     Module     @relation(fields: [moduleId], references: [id])
  moduleId   String
  virtue     String
  weight     Int        @default(10)

  @@id([moduleId, virtue])
}

model Resource {
  id            String         @id
  title         String
  thinker       String?
  era           String?
  type          String
  estMinutes    Int?
  keyIdeas      String?        @default("[]")
  microPractices String?       @default("[]")
  reflections   String?        @default("[]")
  level         String?
  audioUrl      String?
  meta          String?        @default("{}")
}

model Framework {
  id              String   @id
  name            String
  culture         String?
  overview        String?
  coreValues      String?  @default("[]")
  dailyRituals    String?  @default("[]")
  weeklyChallenges String? @default("[]")
  sayings         String?  @default("[]")
  moduleEmphasis  String?  @default("[]")
  starterProtocol String?  @default("[]")
  meta            String?  @default("{}")

  moduleMaps      FrameworkModuleMap[]
  practiceMaps    FrameworkPracticeMap[]
  sessions        Session[]
  challenges      Challenge[]
}

model FrameworkModuleMap {
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId String
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String
  emphasis    String?   @default("{}")

  @@id([frameworkId, moduleId])
}

model FrameworkPracticeMap {
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId String
  practice    Practice  @relation(fields: [practiceId], references: [id])
  practiceId  Int
  adaptationNote String?

  @@id([frameworkId, practiceId])
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String?  @unique
  password    String   // Hashed password
  displayName String?
  tz          String?  @default("America/Los_Angeles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions    Session[]
  streaks     Streak[]
  virtueScores VirtueScore[]
  feeds       Feed[]
  preferences UserPreference?
}

model Session {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  module      Module?    @relation(fields: [moduleId], references: [id])
  moduleId    String?
  practice    Practice?  @relation(fields: [practiceId], references: [id])
  practiceId  Int?
  framework   Framework? @relation(fields: [frameworkId], references: [id])
  frameworkId String?
  startedAt   DateTime   @default(now())
  endedAt     DateTime?
  metrics     String?    @default("{}")
  moodPre     Int?
  moodPost    Int?
  notes       String?
}

model Streak {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
  count       Int      @default(0)
  lastDate    DateTime

  @@id([userId, moduleId])
}

model VirtueScore {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  wisdom      Int      @default(0)
  courage     Int      @default(0)
  temperance  Int      @default(0)
  justice     Int      @default(0)

  @@id([userId, date])
}

model Challenge {
  id            Int        @id @default(autoincrement())
  title         String
  module        Module?    @relation(fields: [moduleId], references: [id])
  moduleId      String?
  framework     Framework? @relation(fields: [frameworkId], references: [id])
  frameworkId   String?
  durationDays  Int
  rules         String?     @default("{}")
  rewardBadge   String?
}

model Feed {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  items       String

  @@id([userId, date])
}

model GeneratedContent {
  id             Int        @id @default(autoincrement())
  scope          String
  keyFingerprint String
  moduleId       String?
  virtuePracticeId Int?
  frameworkId    String?
  level          String?
  locale         String      @default("en")
  style          String?
  payload        String
  createdAt      DateTime    @default(now())

  @@unique([scope, keyFingerprint])
}

model VirtuePractice {
  id            Int       @id @default(autoincrement())
  slug          String?   @unique
  title         String
  virtue        String
  shortDesc     String?
  targetModuleId String?
  tags          String?   @default("[]")
  safety        String?
  measurement   String?
  description   String?
  instructions  String?
  rationale     String?
  metrics       String?
  safetyNotes   String?
  coachPrompts  String?
  meta          String?   @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserPreference {
  userId    Int     @id
  user      User    @relation(fields: [userId], references: [id])
  framework String?
  style     String?
  locale    String? @default("en")
  updatedAt DateTime @default(now())
} 