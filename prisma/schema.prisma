// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Virtue { 
  WISDOM 
  JUSTICE 
  COURAGE 
  TEMPERANCE 
}

enum WidgetKind { 
  TIMER 
  COUNTER 
  DRAG_BOARD 
  CHECKLIST 
  JOURNAL 
  AUDIO_NOTE 
  PHOTO 
  BREATH 
  BALANCE_GYRO 
  WHEEL 
  SLIDERS 
}

// New Framework System Models
model Framework {
  id            String   @id @default(cuid())
  slug          String   @unique
  name          String
  tone          String
  virtuePrimary Virtue
  virtueSecondary Virtue?
  config        Json     // widgets, breath, quests, copy, KPIs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  widgets       Widget[]
  quests        Quest[]
  capstones     Capstone[]
  
  // Legacy relations
  moduleMaps      FrameworkModuleMap[]
  practiceMaps    FrameworkPracticeMap[]
  sessions        Session[]
  challenges      Challenge[]
}

model Widget {
  id           String    @id @default(cuid())
  frameworkId  String
  framework    Framework @relation(fields: [frameworkId], references: [id])
  kind         WidgetKind
  title        String
  config       Json      // per-widget UI & logic params
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  kpis         KPIReading[]
}

model Quest {
  id           String    @id @default(cuid())
  frameworkId  String
  framework    Framework @relation(fields: [frameworkId], references: [id])
  title        String
  description  String
  widgetIds    String[]  // 1..N
  minutes      Int       // 2..6
  virtueGrants Json      // { wisdom?:number, justice?:number, courage?:number, temperance?:number }
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Checkin {
  id            String   @id @default(cuid())
  userId        String
  questId       String?
  widgetId      String
  frameworkSlug String
  payload       Json     // raw completion data (duration, reps, files, choices)
  virtues       Json     // XP granted at time of checkin
  createdAt     DateTime @default(now())
}

model KPIReading {
  id        String   @id @default(cuid())
  widgetId  String
  userId    String
  metric    String   // e.g., "duration_sec", "reps", "rpe", "balance_sec"
  value     Float
  unit      String?  // "sec", "count", "score"
  createdAt DateTime @default(now())
  
  widget    Widget   @relation(fields: [widgetId], references: [id])
}

model Capstone {
  id           String   @id @default(cuid())
  frameworkId  String
  framework    Framework @relation(fields: [frameworkId], references: [id])
  title        String
  requirements Json      // checklist array
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model VirtueTotals {
  id        String   @id @default(cuid())
  userId    String   @unique
  wisdom    Int      @default(0)
  justice   Int      @default(0)
  courage   Int      @default(0)
  temperance Int     @default(0)
  updatedAt DateTime @updatedAt
}

// Legacy models (keeping for backward compatibility)
model Module {
  id             String         @id
  name           String
  domain         String
  defaultVirtue  String
  description    String?
  philosophy     String?
  scienceNotes   String?
  contraindications String?
  commonMistakes String?
  coachingPrompts String?
  measurement    String?
  meta           String?        @default("{}")

  levels         ModuleLevel[]
  practices      Practice[]
  virtueMaps     ModuleVirtueMap[]
  frameworkModuleMaps FrameworkModuleMap[]
  sessions       Session[]
  streaks        Streak[]
  challenges     Challenge[]
}

model ModuleLevel {
  id           Int       @id @default(autoincrement())
  module       Module    @relation(fields: [moduleId], references: [id])
  moduleId     String
  level        String
  durationHint String?

  practices    Practice[]

  @@unique([moduleId, level])
}

model Practice {
  id            Int          @id @default(autoincrement())
  module        Module?      @relation(fields: [moduleId], references: [id])
  moduleId      String?
  level         ModuleLevel? @relation(fields: [levelId], references: [id])
  levelId       Int?
  name          String
  instructions  String
  rationale     String?
  metrics       String?
  safetyNotes   String?
  coachPrompts  String?
  meta          String?      @default("{}")

  frameworkPracticeMaps FrameworkPracticeMap[]
  sessions      Session[]
}

model ModuleVirtueMap {
  module     Module     @relation(fields: [moduleId], references: [id])
  moduleId   String
  virtue     String
  weight     Int        @default(10)

  @@id([moduleId, virtue])
}

model Resource {
  id            String         @id
  title         String
  thinker       String?
  era           String?
  type          String
  estMinutes    Int?
  keyIdeas      String?        @default("[]")
  microPractices String?       @default("[]")
  reflections   String?        @default("[]")
  level         String?
  audioUrl      String?
  meta          String?        @default("{}")
}

model FrameworkModuleMap {
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId String
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String
  emphasis    String?   @default("{}")

  @@id([frameworkId, moduleId])
}

model FrameworkPracticeMap {
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId String
  practice    Practice  @relation(fields: [practiceId], references: [id])
  practiceId  Int
  adaptationNote String?

  @@id([frameworkId, practiceId])
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String?  @unique
  password    String   // Hashed password
  displayName String?
  tz          String?  @default("America/Los_Angeles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions    Session[]
  streaks     Streak[]
  virtueScores VirtueScore[]
  feeds       Feed[]
  preferences UserPreference?
  tasks       Task[]
  goals       Goal[]
  habits      Habit[]
  fastingSessions FastingSession[]
  hydrationLogs HydrationLog[]
  moodLogs    MoodLog[]
  timerSessions TimerSession[]
  
  // Community relations
  posts       CommunityPost[]
  replies     CommunityReply[]
  likes       CommunityLike[]
  bookmarks   CommunityBookmark[]
  notifications CommunityNotification[]
}

model Session {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  module      Module?    @relation(fields: [moduleId], references: [id])
  moduleId    String?
  practice    Practice?  @relation(fields: [practiceId], references: [id])
  practiceId  Int?
  framework   Framework? @relation(fields: [frameworkId], references: [id])
  frameworkId String?
  startedAt   DateTime   @default(now())
  endedAt     DateTime?
  metrics     String?    @default("{}")
  moodPre     Int?
  moodPost    Int?
  notes       String?
}

model Streak {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
  count       Int      @default(0)
  lastDate    DateTime

  @@id([userId, moduleId])
}

model VirtueScore {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  wisdom      Int      @default(0)
  courage     Int      @default(0)
  temperance  Int      @default(0)
  justice     Int      @default(0)
  note        String?

  @@id([userId, date])
}

model Challenge {
  id            Int        @id @default(autoincrement())
  title         String
  module        Module?    @relation(fields: [moduleId], references: [id])
  moduleId      String?
  framework     Framework? @relation(fields: [frameworkId], references: [id])
  frameworkId   String?
  durationDays  Int
  rules         String?     @default("{}")
  rewardBadge   String?
}

model Feed {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  items       String

  @@id([userId, date])
}

model GeneratedContent {
  id             Int        @id @default(autoincrement())
  scope          String
  keyFingerprint String
  moduleId       String?
  virtuePracticeId Int?
  frameworkId    String?
  level          String?
  locale         String      @default("en")
  style          String?
  payload        String
  createdAt      DateTime    @default(now())

  @@unique([scope, keyFingerprint])
}

model VirtuePractice {
  id            Int       @id @default(autoincrement())
  slug          String?   @unique
  title         String
  virtue        String
  shortDesc     String?
  targetModuleId String?
  tags          String?   @default("[]")
  safety        String?
  measurement   String?
  description   String?
  instructions  String?
  rationale     String?
  metrics       String?
  safetyNotes   String?
  coachPrompts  String?
  meta          String?   @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserPreference {
  userId    Int     @id
  user      User    @relation(fields: [userId], references: [id])
  framework String?
  style     String?
  locale    String? @default("en")
  updatedAt DateTime @default(now())
}

// New models for dashboard widgets
model Task {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  completedAt DateTime?
  dueDate     DateTime?
  priority    String    @default("M") // L/M/H
  tag         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Goal {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  category    String
  status      String    @default("active")
  targetDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Habit {
  id          Int       @id @default(autoincrement())
  userId      Int
  name        String
  frequency   String    // e.g. daily, 3x/week
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  checks      HabitCheck[]
}

model HabitCheck {
  id        Int      @id @default(autoincrement())
  habitId   Int
  date      DateTime
  done      Boolean  @default(false)
  note      String?
  createdAt DateTime @default(now())
  Habit     Habit    @relation(fields: [habitId], references: [id])
}

model FastingSession {
  id          Int       @id @default(autoincrement())
  userId      Int
  startTime   DateTime  @default(now())
  endTime     DateTime?
  status      String    @default("active") // active|completed
  protocol    String    // 16:8, 18:6, etc.
  targetHours Int
  notes       String?
  user        User      @relation(fields: [userId], references: [id])
  benefits    FastingBenefit[]
}

model FastingBenefit {
  id               Int             @id @default(autoincrement())
  fastingSessionId Int
  type             String
  intensity        Int
  recordedAt       DateTime        @default(now())
  session          FastingSession  @relation(fields: [fastingSessionId], references: [id])
}

model HydrationLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime @default(now())
  ml        Int
  source    String?  // water, tea, etc.
  user      User      @relation(fields: [userId], references: [id])
}

model MoodLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime @default(now())
  mood      Int      // 1..5
  note      String?
  user      User      @relation(fields: [userId], references: [id])
}

model TimerSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // focus, breathwork, cold, etc.
  label     String?
  startedAt DateTime @default(now())
  endedAt   DateTime?
  meta      Json?
  user      User      @relation(fields: [userId], references: [id])
}

// Community Forum Models
model CommunityPost {
  id            String   @id @default(cuid())
  title         String
  content       String
  authorId      Int
  author        User     @relation(fields: [authorId], references: [id])
  type          String   // ai_question, member_discussion, resource_share
  category      String
  tags          String[] // Array of tags
  isPinned      Boolean  @default(false)
  isAIQuestion  Boolean  @default(false)
  aiInsights    String[] // Array of AI insights
  views         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  replies       CommunityReply[]
  likes         CommunityLike[]
  bookmarks     CommunityBookmark[]
  notifications CommunityNotification[]
}

model CommunityReply {
  id        String   @id @default(cuid())
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?  // For nested replies
  parent    CommunityReply? @relation("ReplyReplies", fields: [parentId], references: [id])
  replies   CommunityReply[] @relation("ReplyReplies")
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunityLike {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model CommunityBookmark {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model CommunityNotification {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String   // new_reply, new_question, like, mention
  title     String
  message   String
  postId    String?
  post      CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
} 