generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Framework {
  id              String                 @id @default(cuid())
  name            String
  config          Json
  createdAt       DateTime               @default(now())
  slug            String                 @unique
  tone            String
  updatedAt       DateTime               @updatedAt
  virtuePrimary   Virtue
  virtueSecondary Virtue?
  capstones       Capstone[]
  challenges      Challenge[]
  moduleMaps      FrameworkModuleMap[]
  practiceMaps    FrameworkPracticeMap[]
  quests          Quest[]
  sessions        Session[]
  widgets         Widget[]
}

model Widget {
  id          String       @id @default(cuid())
  frameworkId String
  title       String
  config      Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  kind        WidgetKind
  kpis        KPIReading[]
  framework   Framework    @relation(fields: [frameworkId], references: [id])
}

model Quest {
  id           String    @id @default(cuid())
  frameworkId  String
  title        String
  description  String
  widgetIds    String[]
  minutes      Int
  virtueGrants Json
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  framework    Framework @relation(fields: [frameworkId], references: [id])
}

model Checkin {
  id            String   @id @default(cuid())
  userId        String
  questId       String?
  widgetId      String
  frameworkSlug String
  payload       Json
  virtues       Json
  createdAt     DateTime @default(now())
}

model KPIReading {
  id        String   @id @default(cuid())
  widgetId  String
  userId    String
  metric    String
  value     Float
  unit      String?
  createdAt DateTime @default(now())
  widget    Widget   @relation(fields: [widgetId], references: [id])
}

model Capstone {
  id           String    @id @default(cuid())
  frameworkId  String
  title        String
  requirements Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  framework    Framework @relation(fields: [frameworkId], references: [id])
}

model VirtueTotals {
  id         String   @id @default(cuid())
  userId     String   @unique
  wisdom     Int      @default(0)
  justice    Int      @default(0)
  courage    Int      @default(0)
  temperance Int      @default(0)
  updatedAt  DateTime @updatedAt
}

model Module {
  id                  String               @id
  name                String
  domain              String
  defaultVirtue       String
  description         String?
  philosophy          String?
  scienceNotes        String?
  contraindications   String?
  commonMistakes      String?
  coachingPrompts     String?
  measurement         String?
  meta                String?              @default("{}")
  challenges          Challenge[]
  frameworkModuleMaps FrameworkModuleMap[]
  levels              ModuleLevel[]
  virtueMaps          ModuleVirtueMap[]
  practices           Practice[]
  sessions            Session[]
  streaks             Streak[]
}

model ModuleLevel {
  id           Int        @id @default(autoincrement())
  moduleId     String
  level        String
  durationHint String?
  module       Module     @relation(fields: [moduleId], references: [id])
  practices    Practice[]

  @@unique([moduleId, level])
}

model Practice {
  id                    Int                    @id @default(autoincrement())
  moduleId              String?
  levelId               Int?
  name                  String
  instructions          String
  rationale             String?
  metrics               String?
  safetyNotes           String?
  coachPrompts          String?
  meta                  String?                @default("{}")
  frameworkPracticeMaps FrameworkPracticeMap[]
  level                 ModuleLevel?           @relation(fields: [levelId], references: [id])
  module                Module?                @relation(fields: [moduleId], references: [id])
  sessions              Session[]
}

model ModuleVirtueMap {
  moduleId String
  virtue   String
  weight   Int    @default(10)
  module   Module @relation(fields: [moduleId], references: [id])

  @@id([moduleId, virtue])
}

model Resource {
  id             String  @id
  title          String
  thinker        String?
  era            String?
  type           String
  estMinutes     Int?
  keyIdeas       String? @default("[]")
  microPractices String? @default("[]")
  reflections    String? @default("[]")
  level          String?
  audioUrl       String?
  meta           String? @default("{}")
}

model FrameworkModuleMap {
  frameworkId String
  moduleId    String
  emphasis    String?   @default("{}")
  framework   Framework @relation(fields: [frameworkId], references: [id])
  module      Module    @relation(fields: [moduleId], references: [id])

  @@id([frameworkId, moduleId])
}

model FrameworkPracticeMap {
  frameworkId    String
  practiceId     Int
  adaptationNote String?
  framework      Framework @relation(fields: [frameworkId], references: [id])
  practice       Practice  @relation(fields: [practiceId], references: [id])

  @@id([frameworkId, practiceId])
}

model User {
  id              Int                     @id @default(autoincrement())
  username        String                  @unique
  email           String?                 @unique
  password        String
  displayName     String?
  tz              String?                 @default("America/Los_Angeles")
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  bookmarks       CommunityBookmark[]
  likes           CommunityLike[]
  notifications   CommunityNotification[]
  posts           CommunityPost[]
  replies         CommunityReply[]
  dailyIntentions DailyIntention[]
  fastingSessions FastingSession[]
  feeds           Feed[]
  goals           Goal[]
  habits          Habit[]
  hydrationLogs   HydrationLog[]
  journalEntries  JournalEntry[]
  moodLogs        MoodLog[]
  naturePhotos    NaturePhoto[]
  sessions        Session[]
  streaks         Streak[]
  tasks           Task[]
  timerSessions   TimerSession[]
  preferences     UserPreference?
  virtueScores    VirtueScore[]
  // Academy relations
  lessonProgress LessonProgress[]
  academyMilestones AcademyMilestone[]
  academyModuleProgress AcademyModuleProgress[]
  
  // Lyceum relations
  lyceumUserProgress LyceumUserProgress?
  lyceumPathProgress LyceumPathProgress[]
  lyceumLessonProgress LyceumLessonProgress[]
  lyceumActivityResponses LyceumActivityResponse[]
  lyceumEvaluations LyceumEvaluation[]
  lyceumDailyCheckins LyceumDailyCheckin[]
  lyceumAgoraPosts LyceumAgoraPost[]
  lyceumAgoraComments LyceumAgoraComment[]
  lyceumAgoraLikes LyceumAgoraLike[]
  lyceumCertificates LyceumCertificate[]
}

model Session {
  id          Int        @id @default(autoincrement())
  userId      Int
  moduleId    String?
  practiceId  Int?
  frameworkId String?
  startedAt   DateTime   @default(now())
  endedAt     DateTime?
  metrics     String?    @default("{}")
  moodPre     Int?
  moodPost    Int?
  notes       String?
  framework   Framework? @relation(fields: [frameworkId], references: [id])
  module      Module?    @relation(fields: [moduleId], references: [id])
  practice    Practice?  @relation(fields: [practiceId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Streak {
  userId   Int
  moduleId String
  count    Int      @default(0)
  lastDate DateTime
  module   Module   @relation(fields: [moduleId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([userId, moduleId])
}

model VirtueScore {
  userId     Int
  date       DateTime
  wisdom     Int      @default(0)
  courage    Int      @default(0)
  temperance Int      @default(0)
  justice    Int      @default(0)
  note       String?
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, date])
}

model Challenge {
  id           Int        @id @default(autoincrement())
  title        String
  moduleId     String?
  frameworkId  String?
  durationDays Int
  rules        String?    @default("{}")
  rewardBadge  String?
  framework    Framework? @relation(fields: [frameworkId], references: [id])
  module       Module?    @relation(fields: [moduleId], references: [id])
}

model Feed {
  userId Int
  date   DateTime
  items  String
  user   User     @relation(fields: [userId], references: [id])

  @@id([userId, date])
}

model GeneratedContent {
  id               Int      @id @default(autoincrement())
  scope            String
  keyFingerprint   String
  moduleId         String?
  virtuePracticeId Int?
  frameworkId      String?
  level            String?
  locale           String   @default("en")
  style            String?
  payload          String
  createdAt        DateTime @default(now())

  @@unique([scope, keyFingerprint])
}

model VirtuePractice {
  id             Int      @id @default(autoincrement())
  slug           String?  @unique
  title          String
  virtue         String
  shortDesc      String?
  targetModuleId String?
  tags           String?  @default("[]")
  safety         String?
  measurement    String?
  description    String?
  instructions   String?
  rationale      String?
  metrics        String?
  safetyNotes    String?
  coachPrompts   String?
  meta           String?  @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserPreference {
  userId     Int      @id
  framework  String?
  style      String?
  locale     String?  @default("en")
  updatedAt  DateTime @default(now())
  name       String?
  timezone   String?
  frameworks String?
  user       User     @relation(fields: [userId], references: [id])
}

model Task {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  completedAt DateTime?
  dueDate     DateTime?
  priority    String    @default("M")
  tag         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Goal {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  category    String
  status      String    @default("active")
  targetDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Habit {
  id        Int          @id @default(autoincrement())
  userId    Int
  name      String
  frequency String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  checks    HabitCheck[]
}

model HabitCheck {
  id        Int      @id @default(autoincrement())
  habitId   Int
  date      DateTime
  done      Boolean  @default(false)
  note      String?
  createdAt DateTime @default(now())
  Habit     Habit    @relation(fields: [habitId], references: [id])
}

model FastingSession {
  id          Int              @id @default(autoincrement())
  userId      Int
  startTime   DateTime         @default(now())
  endTime     DateTime?
  status      String           @default("active")
  protocol    String
  targetHours Int
  notes       String?
  benefits    FastingBenefit[]
  user        User             @relation(fields: [userId], references: [id])
}

model FastingBenefit {
  id               Int            @id @default(autoincrement())
  fastingSessionId Int
  type             String
  intensity        Int
  recordedAt       DateTime       @default(now())
  session          FastingSession @relation(fields: [fastingSessionId], references: [id])
}

model HydrationLog {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime @default(now())
  ml     Int
  source String?
  user   User     @relation(fields: [userId], references: [id])
}

model MoodLog {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime @default(now())
  mood   Int
  note   String?
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model DailyIntention {
  id          Int       @id @default(autoincrement())
  userId      Int
  date        DateTime  @default(now())
  timePeriod  String
  mood        Int
  intention   String
  submitted   Boolean   @default(false)
  submittedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, date, timePeriod])
}

model NaturePhoto {
  id         Int      @id @default(autoincrement())
  userId     Int
  date       DateTime @default(now())
  imagePath  String
  caption    String
  tags       String[]
  location   String?
  weather    String?
  mood       String?
  aiInsights String?
  aiComment  String?
  user       User     @relation(fields: [userId], references: [id])
}

model TimerSession {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String
  label     String?
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  meta      Json?
  user      User      @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id            String                  @id @default(cuid())
  title         String
  content       String
  authorId      Int
  type          String
  category      String
  tags          String[]
  isPinned      Boolean                 @default(false)
  isAIQuestion  Boolean                 @default(false)
  aiInsights    String[]
  views         Int                     @default(0)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  aiComment     String?
  imagePath     String?
  source        String?
  sourceId      String?
  bookmarks     CommunityBookmark[]
  likes         CommunityLike[]
  notifications CommunityNotification[]
  author        User                    @relation(fields: [authorId], references: [id])
  replies       CommunityReply[]
}

model CommunityReply {
  id          String           @id @default(cuid())
  content     String
  authorId    Int
  postId      String
  parentId    String?
  likes       Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isAI        Boolean          @default(false)
  philosopher String?
  author      User             @relation(fields: [authorId], references: [id])
  parent      CommunityReply?  @relation("ReplyReplies", fields: [parentId], references: [id])
  replies     CommunityReply[] @relation("ReplyReplies")
  post        CommunityPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommunityLike {
  id        String        @id @default(cuid())
  userId    Int
  postId    String
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model CommunityBookmark {
  id        String        @id @default(cuid())
  userId    Int
  postId    String
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model CommunityNotification {
  id        String         @id @default(cuid())
  userId    Int
  type      String
  title     String
  message   String
  postId    String?
  isRead    Boolean        @default(false)
  createdAt DateTime       @default(now())
  post      CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id])
}

model JournalEntry {
  id         String   @id @default(cuid())
  userId     Int
  type       String
  content    String
  prompt     String?
  category   String?
  date       DateTime @default(now())
  aiInsights String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

enum Virtue {
  WISDOM
  JUSTICE
  COURAGE
  TEMPERANCE
}

enum WidgetKind {
  TIMER
  COUNTER
  DRAG_BOARD
  CHECKLIST
  JOURNAL
  AUDIO_NOTE
  PHOTO
  BREATH
  BALANCE_GYRO
  WHEEL
  SLIDERS
}

// ===== ARISTOTLE ACADEMY MODELS =====

// Academy Module - represents one of the 4 virtues (Wisdom, Justice, Courage, Temperance)
model AcademyModule {
  id                String   @id @default(cuid())
  name              String   // e.g., "Wisdom", "Justice", "Courage", "Temperance"
  greekName         String   // e.g., "Σοφία (Sophia)"
  description       String
  longDescription   String
  virtue            Virtue   // Primary virtue this module teaches
  icon              String?  // Icon identifier
  color             String?  // Color theme
  gradient          String?  // Gradient theme
  totalLessons      Int      @default(0)
  estimatedTime     Int      @default(0) // Total estimated time in minutes
  prerequisites     String[] // Array of prerequisite module IDs
  capstoneTitle     String?
  capstoneDescription String?
  capstoneRequirements Json? // Array of capstone requirements
  capstoneTime      Int?     // Estimated time for capstone
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  lessons           AcademyLesson[]
  userProgress      AcademyModuleProgress[]
}

// Academy Lesson - individual lessons within a module
model AcademyLesson {
  id                String   @id @default(cuid())
  moduleId          String
  module            AcademyModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title             String
  subtitle          String
  teaching          String   // Main teaching content
  question          String   // Reflection question
  practice          String   // Practice exercise
  reading           String   // Reading material
  quote             String   // Wisdom quote
  author            String   // Quote author
  difficulty        String   // BEGINNER, INTERMEDIATE, ADVANCED
  estimatedTime     Int      // Time in minutes
  prerequisites     String[] // Array of prerequisite lesson IDs
  virtueGrants      Json     // { wisdom?: number, justice?: number, courage?: number, temperance?: number }
  
  // Interactive elements configuration
  interactiveElements Json   // Configuration for teaching, question, practice, reading, quote sections
  
  // AI guidance prompts
  aiGuidance        Json     // AI prompts for different sections
  
  isActive          Boolean  @default(true)
  order             Int      // Order within the module
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userProgress      LessonProgress[]
  milestones        AcademyMilestone[]
}

// User's progress through academy modules
model AcademyModuleProgress {
  id                String   @id @default(cuid())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  moduleId          String
  module            AcademyModule @relation(fields: [moduleId], references: [id])
  progress          Int      @default(0) // Percentage complete (0-100)
  completedLessons  Int      @default(0)
  totalLessons      Int      @default(0)
  isCompleted       Boolean  @default(false)
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  lastAccessedAt    DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, moduleId])
}

// User's progress through individual lessons
model LessonProgress {
  id                String   @id @default(cuid())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  lessonId          String
  lesson            AcademyLesson @relation(fields: [lessonId], references: [id])
  isCompleted       Boolean  @default(false)
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  lastAccessedAt    DateTime @default(now())
  
  // Individual section completion
  teachingCompleted Boolean  @default(false)
  questionCompleted Boolean  @default(false)
  practiceCompleted Boolean  @default(false)
  readingCompleted  Boolean  @default(false)
  quoteCompleted    Boolean  @default(false)
  
  // User responses and AI interactions
  userResponses     Json?    // User's responses to different sections
  aiInteractions    Json?    // AI responses and guidance received
  
  // Practice evidence (photos, files, etc.)
  practiceEvidence  Json?    // Evidence of practice completion
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, lessonId])
}

// Milestones and achievements in the academy
model AcademyMilestone {
  id                String   @id @default(cuid())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  lessonId          String?
  lesson            AcademyLesson? @relation(fields: [lessonId], references: [id])
  moduleId          String?
  type              String   // "lesson_completed", "module_completed", "capstone_completed", "virtue_mastered"
  title             String
  description       String
  virtueGrants      Json     // Virtue points awarded
  metadata          Json?    // Additional milestone data
  achievedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
}

// Lyceum System Models

// Lyceum Path - represents one of the 12 paths of wisdom
model LyceumPath {
  id                    String                @id @default(cuid())
  pathId                String                @unique // e.g., "path1", "path2"
  title                 String
  description           String
  estimatedMinutesTotal Int
  order                 Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  lessons               LyceumLesson[]
  userProgress          LyceumPathProgress[]
  agoraPosts            LyceumAgoraPost[]
}

// Lyceum Lesson - individual lessons within a path
model LyceumLesson {
  id                    String                @id @default(cuid())
  lessonId              String                @unique // e.g., "p1.l1", "p1.l2"
  pathId                String
  title                 String
  timeMinutes           Int
  objectives            String[]              // Learning objectives
  termsIntroduced       String[]              // Terms introduced in this lesson
  artifacts             String[]              // Artifacts earned from this lesson
  masteryUpdates        Json                  // Mastery domain updates
  dependencies          String[]              // Prerequisite lesson IDs
  optional              Boolean               @default(false)
  narrative             Json                  // Intro/outro narrative
  modernPayoff          String
  aiHooks               Json                  // AI guidance prompts
  scholarMode           Json?                 // Optional scholar mode content
  agora                 Json?                 // Optional agora sharing
  order                 Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  path                  LyceumPath            @relation(fields: [pathId], references: [id], onDelete: Cascade)
  activities            LyceumActivity[]
  assessments           LyceumAssessment[]
  userProgress          LyceumLessonProgress[]
  agoraPosts            LyceumAgoraPost[]
}

// Lyceum Activity - interactive elements within lessons
model LyceumActivity {
  id                    String                @id @default(cuid())
  lessonId              String
  activityId            String                // e.g., "p1l1_a1"
  type                  String                // drag_drop_categorize, reflection, quiz, etc.
  instructions          String
  config                Json                  // Activity-specific configuration
  order                 Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  lesson                LyceumLesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userResponses         LyceumActivityResponse[]
}

// Lyceum Assessment - evaluation criteria for lessons
model LyceumAssessment {
  id                    String                @id @default(cuid())
  lessonId              String
  rubric                Json                  // Assessment rubric
  completionRule        String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  lesson                LyceumLesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userEvaluations       LyceumEvaluation[]
}

// User Progress Models

// Lyceum User Progress - overall progress tracking
model LyceumUserProgress {
  id                    String                @id @default(cuid())
  userId                Int                   @unique
  completedLessons      String[]              // Array of completed lesson IDs
  completedPaths        String[]              // Array of completed path IDs
  artifacts             String[]              // Array of collected artifacts
  masteryScores         Json                  // Mastery domain scores
  currentPath           String?               // Currently active path
  currentLesson         String?               // Currently active lesson
  lastAccessed          DateTime?
  totalTimeSpent        Int                   @default(0) // Total time in minutes
  dailyCheckins         Int                   @default(0)
  scholarModeCompleted  String[]              // Array of completed scholar mode lesson IDs
  agoraShares           String[]              // Array of shared lesson IDs
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathProgress          LyceumPathProgress[]
  lessonProgress        LyceumLessonProgress[]
  activityResponses     LyceumActivityResponse[]
  evaluations           LyceumEvaluation[]
  lyceumDailyCheckins   LyceumDailyCheckin[]
}

// Lyceum Path Progress - progress for individual paths
model LyceumPathProgress {
  id                    String                @id @default(cuid())
  userId                Int
  pathId                String
  completed             Boolean               @default(false)
  completedLessons      Int                   @default(0)
  totalLessons          Int
  progressPercentage    Float                 @default(0)
  startedAt             DateTime?
  completedAt           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LyceumPathProgress_user_fkey")
  path                  LyceumPath            @relation(fields: [pathId], references: [id], onDelete: Cascade)
  userProgress          LyceumUserProgress    @relation(fields: [userId], references: [userId])
}

// Lyceum Lesson Progress - progress for individual lessons
model LyceumLessonProgress {
  id                    String                @id @default(cuid())
  userId                Int
  lessonId              String
  completed             Boolean               @default(false)
  timeSpent             Int                   @default(0) // Time in minutes
  startedAt             DateTime?
  completedAt           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LyceumLessonProgress_user_fkey")
  lesson                LyceumLesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userProgress          LyceumUserProgress    @relation(fields: [userId], references: [userId])
}

// Lyceum Activity Response - user responses to activities
model LyceumActivityResponse {
  id                    String                @id @default(cuid())
  userId                Int
  activityId            String
  response              Json                  // User's response data
  submittedAt           DateTime              @default(now())
  createdAt             DateTime              @default(now())
  
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LyceumActivityResponse_user_fkey")
  activity              LyceumActivity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userProgress          LyceumUserProgress    @relation(fields: [userId], references: [userId])
}

// Lyceum Evaluation - AI evaluations of user work
model LyceumEvaluation {
  id                    String                @id @default(cuid())
  userId                Int
  assessmentId          String
  scores                Json                  // Evaluation scores
  notes                 String                // AI feedback
  masteryDeltas         Json                  // Mastery updates
  passed                Boolean
  improvementSuggestion String?
  evaluatedAt           DateTime              @default(now())
  createdAt             DateTime              @default(now())
  
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LyceumEvaluation_user_fkey")
  assessment            LyceumAssessment      @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  userProgress          LyceumUserProgress    @relation(fields: [userId], references: [userId])
}

// Lyceum Daily Check-in - daily reflection and coaching
model LyceumDailyCheckin {
  id                    String                @id @default(cuid())
  userId                Int
  userTelos             String?               // User's stated purpose
  reflection            String?               // User's reflection
  coachingSuggestion    String?               // AI coaching suggestion
  coachingHabit         String?               // Suggested habit
  telosAlignment        String?               // Purpose alignment note
  completedAt           DateTime              @default(now())
  createdAt             DateTime              @default(now())
  
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LyceumDailyCheckin_user_fkey")
  userProgress          LyceumUserProgress    @relation(fields: [userId], references: [userId])
}

// Lyceum Agora (Community) Models
model LyceumAgoraPost {
  id          String   @id @default(cuid())
  userId      Int
  pathId      String?
  lessonId    String?
  title       String
  content     String
  type        String   @default("reflection")
  tags        String[]
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  path        LyceumPath?           @relation(fields: [pathId], references: [id], onDelete: SetNull)
  lesson      LyceumLesson?         @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  comments    LyceumAgoraComment[]
  likes       LyceumAgoraLike[]
}

model LyceumAgoraComment {
  id          String   @id @default(cuid())
  userId      Int
  postId      String
  content     String
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        LyceumAgoraPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model LyceumAgoraLike {
  id     String @id @default(cuid())
  userId Int
  postId String
  createdAt DateTime @default(now())
  
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   LyceumAgoraPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId], name: "LyceumAgoraLike_userId_postId_key")
}

// Lyceum Certificate Model
model LyceumCertificate {
  id                String   @id @default(cuid())
  userId            Int
  certificateId     String   @unique
  verificationCode  String   @unique
  completionDate    DateTime
  overallMastery    Float
  masteryBreakdown  Json
  pathCompletions   String[]
  totalArtifacts    Int
  certificateData   String   // JSON string of certificate data
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
